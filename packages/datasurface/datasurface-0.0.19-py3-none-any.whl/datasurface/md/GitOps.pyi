import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from datasurface.md import Documentation as Documentation
from datasurface.md.Documentation import Documentable as Documentable
from datasurface.md.Lint import ProblemSeverity as ProblemSeverity, ValidationProblem as ValidationProblem, ValidationTree as ValidationTree
from typing import Iterable, Mapping

class Repository(ABC, Documentable, metaclass=abc.ABCMeta):
    def __init__(self, doc: Documentation | None) -> None: ...
    @abstractmethod
    def lint(self, tree: ValidationTree) -> None: ...
    def __eq__(self, __value: object) -> bool: ...

class RepositoryNotAuthorizedToMakeChanges(ValidationProblem):
    def __init__(self, owningRepo: Repository, obj: object, changeSource: Repository) -> None: ...

class GitControlledObject(ABC, Documentable, metaclass=abc.ABCMeta):
    owningRepo: Incomplete
    def __init__(self, repo: Repository) -> None: ...
    def __eq__(self, __value: object) -> bool: ...
    @abstractmethod
    def areTopLevelChangesAuthorized(self, proposed: GitControlledObject, changeSource: Repository, tree: ValidationTree) -> bool: ...
    def superLint(self, tree: ValidationTree): ...
    def checkTopLevelAttributeChangesAreAuthorized(self, proposed: GitControlledObject, changeSource: Repository, vTree: ValidationTree) -> None: ...
    @abstractmethod
    def checkIfChangesAreAuthorized(self, proposed: GitControlledObject, changeSource: Repository, vTree: ValidationTree) -> None: ...
    def checkDictChangesAreAuthorized(self, current: Mapping[str, 'GitControlledObject'], proposed: Mapping[str, 'GitControlledObject'], changeSource: Repository, vTree: ValidationTree) -> None: ...
    def showDictChangesAsProblems(self, current: Mapping[str, object], proposed: Mapping[str, object], vTree: ValidationTree) -> None: ...
    def showSetChangesAsProblems(self, current: Iterable[object], proposed: Iterable[object], vTree: ValidationTree) -> None: ...

class FakeRepository(Repository):
    name: Incomplete
    def __init__(self, name: str, doc: Documentation | None = None) -> None: ...
    def lint(self, tree: ValidationTree) -> None: ...
    def __eq__(self, __value: object) -> bool: ...

class GitHubRepository(Repository):
    repositoryName: Incomplete
    branchName: Incomplete
    def __init__(self, repo: str, branchName: str, doc: Documentation | None = None) -> None: ...
    def __eq__(self, __value: object) -> bool: ...
    def __hash__(self) -> int: ...
    def is_valid_github_repo_name(self, name: str) -> bool: ...
    def is_valid_github_branch(self, branch: str) -> bool: ...
    def lint(self, tree: ValidationTree): ...
