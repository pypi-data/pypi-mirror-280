from _typeshed import Incomplete
from enum import Enum
from typing import Any, Callable, Generator

class ProblemSeverity(Enum):
    ERROR: int
    WARNING: int
    INFO: int

class ValidationProblem:
    description: Incomplete
    sev: Incomplete
    def __init__(self, desc: str, sev: ProblemSeverity = ...) -> None: ...
    def __eq__(self, __value: object) -> bool: ...

class UnknownObjectReference(ValidationProblem):
    def __init__(self, obj: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class AttributeNotSet(ValidationProblem):
    def __init__(self, key: str) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class ObjectIsDeprecated(ValidationProblem):
    def __init__(self, obj: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class DataTransformerMissing(ValidationProblem):
    def __init__(self, obj: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class ObjectWrongType(ValidationProblem):
    def __init__(self, obj: object, expectedType: type, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class ObjectMissing(ValidationProblem):
    def __init__(self, container: object, missingObject: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class UnauthorizedAttributeChange(ValidationProblem):
    def __init__(self, attribute: str, obj1: object, obj2: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class NameHasBadSynthax(ValidationProblem):
    def __init__(self, name: str) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class NameMustBeSQLIdentifier(NameHasBadSynthax):
    def __init__(self, name: str, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class ObjectNotCompatibleWithPolicy(ValidationProblem):
    def __init__(self, obj: object, policy: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class DuplicateObject(ValidationProblem):
    def __init__(self, obj: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class ConstraintViolation(ValidationProblem):
    def __init__(self, obj: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class ProductionDatastoreMustHaveClassifications(ValidationProblem):
    def __init__(self, store: object, dataset: object) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class UnknownChangeSource(ValidationProblem):
    def __init__(self, obj: object, sev: ProblemSeverity) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class ValidationTree:
    object: Incomplete
    numErrors: int
    numWarnings: int
    children: Incomplete
    problems: Incomplete
    def __init__(self, obj: object) -> None: ...
    def addSubTree(self, obj: object) -> ValidationTree: ...
    def getProblems(self) -> list[ValidationProblem]: ...
    def addProblem(self, problem: str, sev: ProblemSeverity = ...) -> None: ...
    def addRaw(self, problem: ValidationProblem) -> None: ...
    def findMatchingProblems(self, filterFunc: Callable[[ValidationProblem], bool]) -> Generator[ValidationProblem, None, None]: ...
    def getErrors(self) -> Generator[ValidationProblem, None, None]: ...
    def hasErrors(self) -> bool: ...
    def hasWarnings(self) -> bool: ...
    def getWarnings(self) -> Generator[ValidationProblem, None, None]: ...
    def checkTypeMatches(self, obj: object, *expectedType: type) -> bool: ...
    def printTree(self, indent: int = 0) -> None: ...
    def containsProblemType(self, type: Any) -> bool: ...
