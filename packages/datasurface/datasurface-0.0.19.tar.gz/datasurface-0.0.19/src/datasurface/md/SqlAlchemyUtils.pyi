import sqlalchemy
from datasurface.md import BigInt as BigInt, Boolean as Boolean, Char as Char, DDLColumn as DDLColumn, DDLTable as DDLTable, DataType as DataType, Dataset as Dataset, Datastore as Datastore, Date as Date, Decimal as Decimal, IEEE32 as IEEE32, IEEE64 as IEEE64, Integer as Integer, Interval as Interval, NChar as NChar, NVarChar as NVarChar, SmallInt as SmallInt, Timestamp as Timestamp, VarChar as VarChar, Variant as Variant
from datasurface.md.Schema import NullableStatus as NullableStatus, PrimaryKeyStatus as PrimaryKeyStatus
from typing import Any, Sequence

def ddlColumnToSQLAlchemyType(dataType: DDLColumn) -> sqlalchemy.Column[Any]: ...
def datasetToSQLAlchemyTable(dataset: Dataset) -> sqlalchemy.Table: ...
def getValueOrThrow(val: _T | None) -> _T: ...
def convertSQLAlchemyTableToDataset(table: sqlalchemy.Table) -> Dataset: ...
def convertSQLAlchemyTableSetToDatastore(name: str, tables: Sequence[sqlalchemy.Table]) -> Datastore: ...
def convertDDLTableToPythonClass(name: str, table: DDLTable) -> str: ...
