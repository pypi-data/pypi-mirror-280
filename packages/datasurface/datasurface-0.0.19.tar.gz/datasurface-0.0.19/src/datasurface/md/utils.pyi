from _typeshed import Incomplete
from datasurface.md.Exceptions import NameMustBeANSISQLIdentifierException as NameMustBeANSISQLIdentifierException
from datasurface.md.Lint import NameHasBadSynthax as NameHasBadSynthax, ValidationTree as ValidationTree
from typing import Callable, Generic, TypeVar

sql_reserved_words: list[str]
sql_reserved_words_as_set: set[str]

def is_valid_sql_identifier(identifier: str) -> bool: ...
def is_valid_azure_key_vault_name(name: str) -> bool: ...
def is_valid_hostname_or_ip(s: str) -> bool: ...

class ANSI_SQL_NamedObject:
    name: Incomplete
    def __init__(self, name: str) -> None: ...
    def __eq__(self, __value: object) -> bool: ...
    def checkForBackwardsCompatibility(self, other: object, vTree: ValidationTree) -> bool: ...
    def nameLint(self, tree: ValidationTree) -> None: ...

def validate_cron_string(cron_string: str): ...
R = TypeVar('R')
A = TypeVar('A')

class Memoize(Generic[A, R]):
    func: Incomplete
    cache: Incomplete
    def __init__(self, func: Callable[[A], R]) -> None: ...
    def __call__(self, *args: A) -> R: ...

def memoize(func: Callable[[A], R]) -> Memoize[A, R]: ...
