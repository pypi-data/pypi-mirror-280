from _typeshed import Incomplete
from datasurface.md.Lint import ValidationTree as ValidationTree
from datasurface.md.Policy import DataClassification as DataClassification, DataClassificationPolicy as DataClassificationPolicy
from datasurface.md.Schema import PartitionKeyList as PartitionKeyList, PrimaryKeyList as PrimaryKeyList, Schema as Schema

class AvroSchema(Schema):
    schema: Incomplete
    classification: Incomplete
    primaryKeyColumns: Incomplete
    ingestionPartitionColumns: Incomplete
    def __init__(self, json_schema: str, classification: list[DataClassification] | None = None, pkCols: PrimaryKeyList | None = None, partCols: PartitionKeyList | None = None) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def hasDataClassifications(self) -> bool: ...
    def checkForBackwardsCompatibility(self, other: Schema, vTree: ValidationTree) -> bool: ...
    def getHubSchema(self) -> Schema: ...
    def checkClassificationsAreOnly(self, verifier: DataClassificationPolicy) -> bool: ...
    def checkColumnsArePrimitiveTypes(self, cols: list[str], tree: ValidationTree): ...
    def checkIfSchemaIsFlat(self) -> bool: ...
    def lint(self, tree: ValidationTree) -> None: ...
