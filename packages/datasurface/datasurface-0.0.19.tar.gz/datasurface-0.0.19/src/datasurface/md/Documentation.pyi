import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from collections import OrderedDict
from datasurface.md.Lint import ValidationTree as ValidationTree

class Documentation(ABC, metaclass=abc.ABCMeta):
    description: Incomplete
    tags: Incomplete
    def __init__(self, description: str, tags: OrderedDict[str, str] | None = None) -> None: ...
    def __eq__(self, other: object): ...
    @abstractmethod
    def lint(self, tree: ValidationTree): ...

class Documentable:
    documentation: Incomplete
    def __init__(self, documentation: Documentation | None) -> None: ...
    def __eq__(self, __value: object): ...

class PlainTextDocumentation(Documentation):
    def __init__(self, description: str, tags: OrderedDict[str, str] | None = None) -> None: ...
    def __eq__(self, other: object): ...
    def lint(self, tree: ValidationTree): ...

class MarkdownDocumentation(Documentation):
    markdown: Incomplete
    def __init__(self, description: str, markdown: str, tags: OrderedDict[str, str] | None = None) -> None: ...
    def __eq__(self, other: object): ...
    def lint(self, tree: ValidationTree): ...
