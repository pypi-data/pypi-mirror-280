# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _PhaseSymmetryPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkButterworthFilterFreqImageSourcePython
else:
    import _itkButterworthFilterFreqImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkGenerateImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkButterworthFilterFreqImageSourceID2_New():
    return itkButterworthFilterFreqImageSourceID2.New()

class itkButterworthFilterFreqImageSourceID2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID2):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkButterworthFilterFreqImageSourceID2_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkButterworthFilterFreqImageSourceID2_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_Clone(self)

    def SetCutoff(self, _arg):
        r"""
        SetCutoff(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_SetCutoff(self, _arg)

    def GetCutoff(self):
        r"""GetCutoff(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_GetCutoff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_GetOrder(self)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkButterworthFilterFreqImageSourceID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceID2

        Create a new object of the class itkButterworthFilterFreqImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceID2 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_swigregister(itkButterworthFilterFreqImageSourceID2)

def itkButterworthFilterFreqImageSourceID3_New():
    return itkButterworthFilterFreqImageSourceID3.New()

class itkButterworthFilterFreqImageSourceID3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID3):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkButterworthFilterFreqImageSourceID3_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkButterworthFilterFreqImageSourceID3_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_Clone(self)

    def SetCutoff(self, _arg):
        r"""
        SetCutoff(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_SetCutoff(self, _arg)

    def GetCutoff(self):
        r"""GetCutoff(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_GetCutoff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_GetOrder(self)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkButterworthFilterFreqImageSourceID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceID3

        Create a new object of the class itkButterworthFilterFreqImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceID3 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_swigregister(itkButterworthFilterFreqImageSourceID3)

def itkButterworthFilterFreqImageSourceID4_New():
    return itkButterworthFilterFreqImageSourceID4.New()

class itkButterworthFilterFreqImageSourceID4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID4):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkButterworthFilterFreqImageSourceID4_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkButterworthFilterFreqImageSourceID4_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_Clone(self)

    def SetCutoff(self, _arg):
        r"""
        SetCutoff(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_SetCutoff(self, _arg)

    def GetCutoff(self):
        r"""GetCutoff(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_GetCutoff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_GetOrder(self)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkButterworthFilterFreqImageSourceID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceID4

        Create a new object of the class itkButterworthFilterFreqImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceID4 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_swigregister(itkButterworthFilterFreqImageSourceID4)

def itkButterworthFilterFreqImageSourceIF2_New():
    return itkButterworthFilterFreqImageSourceIF2.New()

class itkButterworthFilterFreqImageSourceIF2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF2):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkButterworthFilterFreqImageSourceIF2_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkButterworthFilterFreqImageSourceIF2_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_Clone(self)

    def SetCutoff(self, _arg):
        r"""
        SetCutoff(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_SetCutoff(self, _arg)

    def GetCutoff(self):
        r"""GetCutoff(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_GetCutoff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_GetOrder(self)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkButterworthFilterFreqImageSourceIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceIF2

        Create a new object of the class itkButterworthFilterFreqImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceIF2 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_swigregister(itkButterworthFilterFreqImageSourceIF2)

def itkButterworthFilterFreqImageSourceIF3_New():
    return itkButterworthFilterFreqImageSourceIF3.New()

class itkButterworthFilterFreqImageSourceIF3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF3):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkButterworthFilterFreqImageSourceIF3_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkButterworthFilterFreqImageSourceIF3_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_Clone(self)

    def SetCutoff(self, _arg):
        r"""
        SetCutoff(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_SetCutoff(self, _arg)

    def GetCutoff(self):
        r"""GetCutoff(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_GetCutoff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_GetOrder(self)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkButterworthFilterFreqImageSourceIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceIF3

        Create a new object of the class itkButterworthFilterFreqImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceIF3 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_swigregister(itkButterworthFilterFreqImageSourceIF3)

def itkButterworthFilterFreqImageSourceIF4_New():
    return itkButterworthFilterFreqImageSourceIF4.New()

class itkButterworthFilterFreqImageSourceIF4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF4):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkButterworthFilterFreqImageSourceIF4_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkButterworthFilterFreqImageSourceIF4_Pointer"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_Clone(self)

    def SetCutoff(self, _arg):
        r"""
        SetCutoff(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_SetCutoff(self, _arg)

    def GetCutoff(self):
        r"""GetCutoff(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_GetCutoff(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> double"""
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_GetOrder(self)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkButterworthFilterFreqImageSourceIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceIF4

        Create a new object of the class itkButterworthFilterFreqImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceIF4 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_swigregister(itkButterworthFilterFreqImageSourceIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def butterworth_filter_freq_image_source(*args,  cutoff: float=..., order: float=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ButterworthFilterFreqImageSource"""
    import itk

    kwarg_typehints = { 'cutoff':cutoff,'order':order,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ButterworthFilterFreqImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def butterworth_filter_freq_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.PhaseSymmetry.ButterworthFilterFreqImageSource
    butterworth_filter_freq_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    butterworth_filter_freq_image_source.__doc__ = filter_object.__doc__



