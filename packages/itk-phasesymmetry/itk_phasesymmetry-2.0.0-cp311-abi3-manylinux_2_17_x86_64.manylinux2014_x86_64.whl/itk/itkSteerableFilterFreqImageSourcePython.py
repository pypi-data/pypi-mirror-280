# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _PhaseSymmetryPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSteerableFilterFreqImageSourcePython
else:
    import _itkSteerableFilterFreqImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython

def itkSteerableFilterFreqImageSourceID2_New():
    return itkSteerableFilterFreqImageSourceID2.New()

class itkSteerableFilterFreqImageSourceID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkSteerableFilterFreqImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSteerableFilterFreqImageSourceID2_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSteerableFilterFreqImageSourceID2_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, values)

        Parameters
        ----------
        values: unsigned long const *

        SetSize(self, values)

        Parameters
        ----------
        values: itkSize2 const

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_SetSize(self, *args)

    def GetSize(self):
        r"""GetSize(self) -> unsigned long const *"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_GetSize(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        SetSpacing(self, values)

        Parameters
        ----------
        values: float const *

        SetSpacing(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_GetSpacing(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        SetOrigin(self, values)

        Parameters
        ----------
        values: float const *

        SetOrigin(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD22

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_GetDirection(self)

    def SetOrientation(self, _arg):
        r"""
        SetOrientation(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_SetOrientation(self, _arg)

    def GetOrientation(self):
        r"""GetOrientation(self) -> itkFixedArrayD2"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_GetOrientation(self)

    def SetAngularBandwidth(self, _arg):
        r"""
        SetAngularBandwidth(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_SetAngularBandwidth(self, _arg)

    def GetAngularBandwidth(self):
        r"""GetAngularBandwidth(self) -> double const &"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_GetAngularBandwidth(self)
    __swig_destroy__ = _itkSteerableFilterFreqImageSourcePython.delete_itkSteerableFilterFreqImageSourceID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSteerableFilterFreqImageSourceID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSteerableFilterFreqImageSourceID2

        Create a new object of the class itkSteerableFilterFreqImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSteerableFilterFreqImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSteerableFilterFreqImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSteerableFilterFreqImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSteerableFilterFreqImageSourceID2 in _itkSteerableFilterFreqImageSourcePython:
_itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID2_swigregister(itkSteerableFilterFreqImageSourceID2)

def itkSteerableFilterFreqImageSourceID3_New():
    return itkSteerableFilterFreqImageSourceID3.New()

class itkSteerableFilterFreqImageSourceID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkSteerableFilterFreqImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSteerableFilterFreqImageSourceID3_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSteerableFilterFreqImageSourceID3_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, values)

        Parameters
        ----------
        values: unsigned long const *

        SetSize(self, values)

        Parameters
        ----------
        values: itkSize3 const

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_SetSize(self, *args)

    def GetSize(self):
        r"""GetSize(self) -> unsigned long const *"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_GetSize(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, values)

        Parameters
        ----------
        values: float const *

        SetSpacing(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_GetSpacing(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, values)

        Parameters
        ----------
        values: float const *

        SetOrigin(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_GetDirection(self)

    def SetOrientation(self, _arg):
        r"""
        SetOrientation(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_SetOrientation(self, _arg)

    def GetOrientation(self):
        r"""GetOrientation(self) -> itkFixedArrayD3"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_GetOrientation(self)

    def SetAngularBandwidth(self, _arg):
        r"""
        SetAngularBandwidth(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_SetAngularBandwidth(self, _arg)

    def GetAngularBandwidth(self):
        r"""GetAngularBandwidth(self) -> double const &"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_GetAngularBandwidth(self)
    __swig_destroy__ = _itkSteerableFilterFreqImageSourcePython.delete_itkSteerableFilterFreqImageSourceID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSteerableFilterFreqImageSourceID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSteerableFilterFreqImageSourceID3

        Create a new object of the class itkSteerableFilterFreqImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSteerableFilterFreqImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSteerableFilterFreqImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSteerableFilterFreqImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSteerableFilterFreqImageSourceID3 in _itkSteerableFilterFreqImageSourcePython:
_itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID3_swigregister(itkSteerableFilterFreqImageSourceID3)

def itkSteerableFilterFreqImageSourceID4_New():
    return itkSteerableFilterFreqImageSourceID4.New()

class itkSteerableFilterFreqImageSourceID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkSteerableFilterFreqImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSteerableFilterFreqImageSourceID4_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSteerableFilterFreqImageSourceID4_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, values)

        Parameters
        ----------
        values: unsigned long const *

        SetSize(self, values)

        Parameters
        ----------
        values: itkSize4 const

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_SetSize(self, *args)

    def GetSize(self):
        r"""GetSize(self) -> unsigned long const *"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_GetSize(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        SetSpacing(self, values)

        Parameters
        ----------
        values: float const *

        SetSpacing(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_GetSpacing(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        SetOrigin(self, values)

        Parameters
        ----------
        values: float const *

        SetOrigin(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD44

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_GetDirection(self)

    def SetOrientation(self, _arg):
        r"""
        SetOrientation(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_SetOrientation(self, _arg)

    def GetOrientation(self):
        r"""GetOrientation(self) -> itkFixedArrayD4"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_GetOrientation(self)

    def SetAngularBandwidth(self, _arg):
        r"""
        SetAngularBandwidth(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_SetAngularBandwidth(self, _arg)

    def GetAngularBandwidth(self):
        r"""GetAngularBandwidth(self) -> double const &"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_GetAngularBandwidth(self)
    __swig_destroy__ = _itkSteerableFilterFreqImageSourcePython.delete_itkSteerableFilterFreqImageSourceID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSteerableFilterFreqImageSourceID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSteerableFilterFreqImageSourceID4

        Create a new object of the class itkSteerableFilterFreqImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSteerableFilterFreqImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSteerableFilterFreqImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSteerableFilterFreqImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSteerableFilterFreqImageSourceID4 in _itkSteerableFilterFreqImageSourcePython:
_itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceID4_swigregister(itkSteerableFilterFreqImageSourceID4)

def itkSteerableFilterFreqImageSourceIF2_New():
    return itkSteerableFilterFreqImageSourceIF2.New()

class itkSteerableFilterFreqImageSourceIF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkSteerableFilterFreqImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSteerableFilterFreqImageSourceIF2_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSteerableFilterFreqImageSourceIF2_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, values)

        Parameters
        ----------
        values: unsigned long const *

        SetSize(self, values)

        Parameters
        ----------
        values: itkSize2 const

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_SetSize(self, *args)

    def GetSize(self):
        r"""GetSize(self) -> unsigned long const *"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_GetSize(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        SetSpacing(self, values)

        Parameters
        ----------
        values: float const *

        SetSpacing(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_GetSpacing(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        SetOrigin(self, values)

        Parameters
        ----------
        values: float const *

        SetOrigin(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD22

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_GetDirection(self)

    def SetOrientation(self, _arg):
        r"""
        SetOrientation(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_SetOrientation(self, _arg)

    def GetOrientation(self):
        r"""GetOrientation(self) -> itkFixedArrayD2"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_GetOrientation(self)

    def SetAngularBandwidth(self, _arg):
        r"""
        SetAngularBandwidth(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_SetAngularBandwidth(self, _arg)

    def GetAngularBandwidth(self):
        r"""GetAngularBandwidth(self) -> double const &"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_GetAngularBandwidth(self)
    __swig_destroy__ = _itkSteerableFilterFreqImageSourcePython.delete_itkSteerableFilterFreqImageSourceIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSteerableFilterFreqImageSourceIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSteerableFilterFreqImageSourceIF2

        Create a new object of the class itkSteerableFilterFreqImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSteerableFilterFreqImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSteerableFilterFreqImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSteerableFilterFreqImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSteerableFilterFreqImageSourceIF2 in _itkSteerableFilterFreqImageSourcePython:
_itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF2_swigregister(itkSteerableFilterFreqImageSourceIF2)

def itkSteerableFilterFreqImageSourceIF3_New():
    return itkSteerableFilterFreqImageSourceIF3.New()

class itkSteerableFilterFreqImageSourceIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkSteerableFilterFreqImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSteerableFilterFreqImageSourceIF3_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSteerableFilterFreqImageSourceIF3_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, values)

        Parameters
        ----------
        values: unsigned long const *

        SetSize(self, values)

        Parameters
        ----------
        values: itkSize3 const

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_SetSize(self, *args)

    def GetSize(self):
        r"""GetSize(self) -> unsigned long const *"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_GetSize(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, values)

        Parameters
        ----------
        values: float const *

        SetSpacing(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_GetSpacing(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, values)

        Parameters
        ----------
        values: float const *

        SetOrigin(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_GetDirection(self)

    def SetOrientation(self, _arg):
        r"""
        SetOrientation(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_SetOrientation(self, _arg)

    def GetOrientation(self):
        r"""GetOrientation(self) -> itkFixedArrayD3"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_GetOrientation(self)

    def SetAngularBandwidth(self, _arg):
        r"""
        SetAngularBandwidth(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_SetAngularBandwidth(self, _arg)

    def GetAngularBandwidth(self):
        r"""GetAngularBandwidth(self) -> double const &"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_GetAngularBandwidth(self)
    __swig_destroy__ = _itkSteerableFilterFreqImageSourcePython.delete_itkSteerableFilterFreqImageSourceIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSteerableFilterFreqImageSourceIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSteerableFilterFreqImageSourceIF3

        Create a new object of the class itkSteerableFilterFreqImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSteerableFilterFreqImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSteerableFilterFreqImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSteerableFilterFreqImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSteerableFilterFreqImageSourceIF3 in _itkSteerableFilterFreqImageSourcePython:
_itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF3_swigregister(itkSteerableFilterFreqImageSourceIF3)

def itkSteerableFilterFreqImageSourceIF4_New():
    return itkSteerableFilterFreqImageSourceIF4.New()

class itkSteerableFilterFreqImageSourceIF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkSteerableFilterFreqImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSteerableFilterFreqImageSourceIF4_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSteerableFilterFreqImageSourceIF4_Pointer"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, values)

        Parameters
        ----------
        values: unsigned long const *

        SetSize(self, values)

        Parameters
        ----------
        values: itkSize4 const

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_SetSize(self, *args)

    def GetSize(self):
        r"""GetSize(self) -> unsigned long const *"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_GetSize(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        SetSpacing(self, values)

        Parameters
        ----------
        values: float const *

        SetSpacing(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_GetSpacing(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        SetOrigin(self, values)

        Parameters
        ----------
        values: float const *

        SetOrigin(self, values)

        Parameters
        ----------
        values: double const *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD44

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_GetDirection(self)

    def SetOrientation(self, _arg):
        r"""
        SetOrientation(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_SetOrientation(self, _arg)

    def GetOrientation(self):
        r"""GetOrientation(self) -> itkFixedArrayD4"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_GetOrientation(self)

    def SetAngularBandwidth(self, _arg):
        r"""
        SetAngularBandwidth(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_SetAngularBandwidth(self, _arg)

    def GetAngularBandwidth(self):
        r"""GetAngularBandwidth(self) -> double const &"""
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_GetAngularBandwidth(self)
    __swig_destroy__ = _itkSteerableFilterFreqImageSourcePython.delete_itkSteerableFilterFreqImageSourceIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSteerableFilterFreqImageSourceIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSteerableFilterFreqImageSourceIF4

        Create a new object of the class itkSteerableFilterFreqImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSteerableFilterFreqImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSteerableFilterFreqImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSteerableFilterFreqImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSteerableFilterFreqImageSourceIF4 in _itkSteerableFilterFreqImageSourcePython:
_itkSteerableFilterFreqImageSourcePython.itkSteerableFilterFreqImageSourceIF4_swigregister(itkSteerableFilterFreqImageSourceIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def steerable_filter_freq_image_source(*args,  size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., orientation: Sequence[float]=..., angular_bandwidth: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SteerableFilterFreqImageSource"""
    import itk

    kwarg_typehints = { 'size':size,'spacing':spacing,'origin':origin,'direction':direction,'orientation':orientation,'angular_bandwidth':angular_bandwidth }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SteerableFilterFreqImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def steerable_filter_freq_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.PhaseSymmetry.SteerableFilterFreqImageSource
    steerable_filter_freq_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    steerable_filter_freq_image_source.__doc__ = filter_object.__doc__



