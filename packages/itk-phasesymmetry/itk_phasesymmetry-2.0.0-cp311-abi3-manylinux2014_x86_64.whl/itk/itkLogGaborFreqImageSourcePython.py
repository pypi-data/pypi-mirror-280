# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _PhaseSymmetryPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLogGaborFreqImageSourcePython
else:
    import _itkLogGaborFreqImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkGenerateImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython

def itkLogGaborFreqImageSourceID2_New():
    return itkLogGaborFreqImageSourceID2.New()

class itkLogGaborFreqImageSourceID2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID2):
    r"""Proxy of C++ itkLogGaborFreqImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogGaborFreqImageSourceID2_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogGaborFreqImageSourceID2_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID2_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID2_GetSigma(self)

    def SetWavelengths(self, _arg):
        r"""
        SetWavelengths(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID2_SetWavelengths(self, _arg)

    def GetWavelengths(self):
        r"""GetWavelengths(self) -> itkFixedArrayD2"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID2_GetWavelengths(self)
    __swig_destroy__ = _itkLogGaborFreqImageSourcePython.delete_itkLogGaborFreqImageSourceID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogGaborFreqImageSourceID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogGaborFreqImageSourceID2

        Create a new object of the class itkLogGaborFreqImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogGaborFreqImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogGaborFreqImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogGaborFreqImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogGaborFreqImageSourceID2 in _itkLogGaborFreqImageSourcePython:
_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID2_swigregister(itkLogGaborFreqImageSourceID2)

def itkLogGaborFreqImageSourceID3_New():
    return itkLogGaborFreqImageSourceID3.New()

class itkLogGaborFreqImageSourceID3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID3):
    r"""Proxy of C++ itkLogGaborFreqImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogGaborFreqImageSourceID3_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogGaborFreqImageSourceID3_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID3_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID3_GetSigma(self)

    def SetWavelengths(self, _arg):
        r"""
        SetWavelengths(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID3_SetWavelengths(self, _arg)

    def GetWavelengths(self):
        r"""GetWavelengths(self) -> itkFixedArrayD3"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID3_GetWavelengths(self)
    __swig_destroy__ = _itkLogGaborFreqImageSourcePython.delete_itkLogGaborFreqImageSourceID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogGaborFreqImageSourceID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogGaborFreqImageSourceID3

        Create a new object of the class itkLogGaborFreqImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogGaborFreqImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogGaborFreqImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogGaborFreqImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogGaborFreqImageSourceID3 in _itkLogGaborFreqImageSourcePython:
_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID3_swigregister(itkLogGaborFreqImageSourceID3)

def itkLogGaborFreqImageSourceID4_New():
    return itkLogGaborFreqImageSourceID4.New()

class itkLogGaborFreqImageSourceID4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID4):
    r"""Proxy of C++ itkLogGaborFreqImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogGaborFreqImageSourceID4_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogGaborFreqImageSourceID4_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID4_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID4_GetSigma(self)

    def SetWavelengths(self, _arg):
        r"""
        SetWavelengths(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID4_SetWavelengths(self, _arg)

    def GetWavelengths(self):
        r"""GetWavelengths(self) -> itkFixedArrayD4"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID4_GetWavelengths(self)
    __swig_destroy__ = _itkLogGaborFreqImageSourcePython.delete_itkLogGaborFreqImageSourceID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogGaborFreqImageSourceID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogGaborFreqImageSourceID4

        Create a new object of the class itkLogGaborFreqImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogGaborFreqImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogGaborFreqImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogGaborFreqImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogGaborFreqImageSourceID4 in _itkLogGaborFreqImageSourcePython:
_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceID4_swigregister(itkLogGaborFreqImageSourceID4)

def itkLogGaborFreqImageSourceIF2_New():
    return itkLogGaborFreqImageSourceIF2.New()

class itkLogGaborFreqImageSourceIF2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF2):
    r"""Proxy of C++ itkLogGaborFreqImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogGaborFreqImageSourceIF2_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogGaborFreqImageSourceIF2_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_GetSigma(self)

    def SetWavelengths(self, _arg):
        r"""
        SetWavelengths(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_SetWavelengths(self, _arg)

    def GetWavelengths(self):
        r"""GetWavelengths(self) -> itkFixedArrayD2"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_GetWavelengths(self)
    __swig_destroy__ = _itkLogGaborFreqImageSourcePython.delete_itkLogGaborFreqImageSourceIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogGaborFreqImageSourceIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogGaborFreqImageSourceIF2

        Create a new object of the class itkLogGaborFreqImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogGaborFreqImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogGaborFreqImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogGaborFreqImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogGaborFreqImageSourceIF2 in _itkLogGaborFreqImageSourcePython:
_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_swigregister(itkLogGaborFreqImageSourceIF2)

def itkLogGaborFreqImageSourceIF3_New():
    return itkLogGaborFreqImageSourceIF3.New()

class itkLogGaborFreqImageSourceIF3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF3):
    r"""Proxy of C++ itkLogGaborFreqImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogGaborFreqImageSourceIF3_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogGaborFreqImageSourceIF3_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_GetSigma(self)

    def SetWavelengths(self, _arg):
        r"""
        SetWavelengths(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_SetWavelengths(self, _arg)

    def GetWavelengths(self):
        r"""GetWavelengths(self) -> itkFixedArrayD3"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_GetWavelengths(self)
    __swig_destroy__ = _itkLogGaborFreqImageSourcePython.delete_itkLogGaborFreqImageSourceIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogGaborFreqImageSourceIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogGaborFreqImageSourceIF3

        Create a new object of the class itkLogGaborFreqImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogGaborFreqImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogGaborFreqImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogGaborFreqImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogGaborFreqImageSourceIF3 in _itkLogGaborFreqImageSourcePython:
_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_swigregister(itkLogGaborFreqImageSourceIF3)

def itkLogGaborFreqImageSourceIF4_New():
    return itkLogGaborFreqImageSourceIF4.New()

class itkLogGaborFreqImageSourceIF4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF4):
    r"""Proxy of C++ itkLogGaborFreqImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLogGaborFreqImageSourceIF4_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLogGaborFreqImageSourceIF4_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF4_Clone(self)

    def SetSigma(self, _arg):
        r"""
        SetSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF4_SetSigma(self, _arg)

    def GetSigma(self):
        r"""GetSigma(self) -> double"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF4_GetSigma(self)

    def SetWavelengths(self, _arg):
        r"""
        SetWavelengths(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF4_SetWavelengths(self, _arg)

    def GetWavelengths(self):
        r"""GetWavelengths(self) -> itkFixedArrayD4"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF4_GetWavelengths(self)
    __swig_destroy__ = _itkLogGaborFreqImageSourcePython.delete_itkLogGaborFreqImageSourceIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLogGaborFreqImageSourceIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLogGaborFreqImageSourceIF4

        Create a new object of the class itkLogGaborFreqImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogGaborFreqImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLogGaborFreqImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLogGaborFreqImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLogGaborFreqImageSourceIF4 in _itkLogGaborFreqImageSourcePython:
_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF4_swigregister(itkLogGaborFreqImageSourceIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def log_gabor_freq_image_source(*args,  sigma: float=..., wavelengths: Sequence[float]=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for LogGaborFreqImageSource"""
    import itk

    kwarg_typehints = { 'sigma':sigma,'wavelengths':wavelengths,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.LogGaborFreqImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def log_gabor_freq_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.PhaseSymmetry.LogGaborFreqImageSource
    log_gabor_freq_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    log_gabor_freq_image_source.__doc__ = filter_object.__doc__



