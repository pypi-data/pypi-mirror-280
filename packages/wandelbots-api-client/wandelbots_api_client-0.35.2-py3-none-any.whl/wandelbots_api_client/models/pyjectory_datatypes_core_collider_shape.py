# coding: utf-8

"""
    Wandelbots Nova Public API

    Interact with robots in an easy and intuitive way. 

    The version of the OpenAPI document: 1.0.0 beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from wandelbots_api_client.models.pyjectory_datatypes_core_box import PyjectoryDatatypesCoreBox
from wandelbots_api_client.models.pyjectory_datatypes_core_capsule import PyjectoryDatatypesCoreCapsule
from wandelbots_api_client.models.pyjectory_datatypes_core_convex_hull import PyjectoryDatatypesCoreConvexHull
from wandelbots_api_client.models.pyjectory_datatypes_core_cylinder import PyjectoryDatatypesCoreCylinder
from wandelbots_api_client.models.pyjectory_datatypes_core_plane import PyjectoryDatatypesCorePlane
from wandelbots_api_client.models.pyjectory_datatypes_core_rectangle import PyjectoryDatatypesCoreRectangle
from wandelbots_api_client.models.pyjectory_datatypes_core_rectangular_capsule import PyjectoryDatatypesCoreRectangularCapsule
from wandelbots_api_client.models.pyjectory_datatypes_core_sphere import PyjectoryDatatypesCoreSphere
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

PYJECTORYDATATYPESCORECOLLIDERSHAPE_ONE_OF_SCHEMAS = ["PyjectoryDatatypesCoreBox", "PyjectoryDatatypesCoreCapsule", "PyjectoryDatatypesCoreConvexHull", "PyjectoryDatatypesCoreCylinder", "PyjectoryDatatypesCorePlane", "PyjectoryDatatypesCoreRectangle", "PyjectoryDatatypesCoreRectangularCapsule", "PyjectoryDatatypesCoreSphere"]

class PyjectoryDatatypesCoreColliderShape(BaseModel):
    """
    PyjectoryDatatypesCoreColliderShape
    """
    # data type: PyjectoryDatatypesCoreSphere
    oneof_schema_1_validator: Optional[PyjectoryDatatypesCoreSphere] = None
    # data type: PyjectoryDatatypesCoreBox
    oneof_schema_2_validator: Optional[PyjectoryDatatypesCoreBox] = None
    # data type: PyjectoryDatatypesCoreRectangle
    oneof_schema_3_validator: Optional[PyjectoryDatatypesCoreRectangle] = None
    # data type: PyjectoryDatatypesCorePlane
    oneof_schema_4_validator: Optional[PyjectoryDatatypesCorePlane] = None
    # data type: PyjectoryDatatypesCoreCylinder
    oneof_schema_5_validator: Optional[PyjectoryDatatypesCoreCylinder] = None
    # data type: PyjectoryDatatypesCoreCapsule
    oneof_schema_6_validator: Optional[PyjectoryDatatypesCoreCapsule] = None
    # data type: PyjectoryDatatypesCoreRectangularCapsule
    oneof_schema_7_validator: Optional[PyjectoryDatatypesCoreRectangularCapsule] = None
    # data type: PyjectoryDatatypesCoreConvexHull
    oneof_schema_8_validator: Optional[PyjectoryDatatypesCoreConvexHull] = None
    actual_instance: Optional[Union[PyjectoryDatatypesCoreBox, PyjectoryDatatypesCoreCapsule, PyjectoryDatatypesCoreConvexHull, PyjectoryDatatypesCoreCylinder, PyjectoryDatatypesCorePlane, PyjectoryDatatypesCoreRectangle, PyjectoryDatatypesCoreRectangularCapsule, PyjectoryDatatypesCoreSphere]] = None
    one_of_schemas: Set[str] = { "PyjectoryDatatypesCoreBox", "PyjectoryDatatypesCoreCapsule", "PyjectoryDatatypesCoreConvexHull", "PyjectoryDatatypesCoreCylinder", "PyjectoryDatatypesCorePlane", "PyjectoryDatatypesCoreRectangle", "PyjectoryDatatypesCoreRectangularCapsule", "PyjectoryDatatypesCoreSphere" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PyjectoryDatatypesCoreColliderShape.model_construct()
        error_messages = []
        match = 0
        # validate data type: PyjectoryDatatypesCoreSphere
        if not isinstance(v, PyjectoryDatatypesCoreSphere):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PyjectoryDatatypesCoreSphere`")
        else:
            match += 1
        # validate data type: PyjectoryDatatypesCoreBox
        if not isinstance(v, PyjectoryDatatypesCoreBox):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PyjectoryDatatypesCoreBox`")
        else:
            match += 1
        # validate data type: PyjectoryDatatypesCoreRectangle
        if not isinstance(v, PyjectoryDatatypesCoreRectangle):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PyjectoryDatatypesCoreRectangle`")
        else:
            match += 1
        # validate data type: PyjectoryDatatypesCorePlane
        if not isinstance(v, PyjectoryDatatypesCorePlane):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PyjectoryDatatypesCorePlane`")
        else:
            match += 1
        # validate data type: PyjectoryDatatypesCoreCylinder
        if not isinstance(v, PyjectoryDatatypesCoreCylinder):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PyjectoryDatatypesCoreCylinder`")
        else:
            match += 1
        # validate data type: PyjectoryDatatypesCoreCapsule
        if not isinstance(v, PyjectoryDatatypesCoreCapsule):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PyjectoryDatatypesCoreCapsule`")
        else:
            match += 1
        # validate data type: PyjectoryDatatypesCoreRectangularCapsule
        if not isinstance(v, PyjectoryDatatypesCoreRectangularCapsule):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PyjectoryDatatypesCoreRectangularCapsule`")
        else:
            match += 1
        # validate data type: PyjectoryDatatypesCoreConvexHull
        if not isinstance(v, PyjectoryDatatypesCoreConvexHull):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PyjectoryDatatypesCoreConvexHull`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PyjectoryDatatypesCoreColliderShape with oneOf schemas: PyjectoryDatatypesCoreBox, PyjectoryDatatypesCoreCapsule, PyjectoryDatatypesCoreConvexHull, PyjectoryDatatypesCoreCylinder, PyjectoryDatatypesCorePlane, PyjectoryDatatypesCoreRectangle, PyjectoryDatatypesCoreRectangularCapsule, PyjectoryDatatypesCoreSphere. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PyjectoryDatatypesCoreColliderShape with oneOf schemas: PyjectoryDatatypesCoreBox, PyjectoryDatatypesCoreCapsule, PyjectoryDatatypesCoreConvexHull, PyjectoryDatatypesCoreCylinder, PyjectoryDatatypesCorePlane, PyjectoryDatatypesCoreRectangle, PyjectoryDatatypesCoreRectangularCapsule, PyjectoryDatatypesCoreSphere. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PyjectoryDatatypesCoreSphere
        try:
            instance.actual_instance = PyjectoryDatatypesCoreSphere.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PyjectoryDatatypesCoreBox
        try:
            instance.actual_instance = PyjectoryDatatypesCoreBox.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PyjectoryDatatypesCoreRectangle
        try:
            instance.actual_instance = PyjectoryDatatypesCoreRectangle.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PyjectoryDatatypesCorePlane
        try:
            instance.actual_instance = PyjectoryDatatypesCorePlane.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PyjectoryDatatypesCoreCylinder
        try:
            instance.actual_instance = PyjectoryDatatypesCoreCylinder.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PyjectoryDatatypesCoreCapsule
        try:
            instance.actual_instance = PyjectoryDatatypesCoreCapsule.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PyjectoryDatatypesCoreRectangularCapsule
        try:
            instance.actual_instance = PyjectoryDatatypesCoreRectangularCapsule.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PyjectoryDatatypesCoreConvexHull
        try:
            instance.actual_instance = PyjectoryDatatypesCoreConvexHull.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PyjectoryDatatypesCoreColliderShape with oneOf schemas: PyjectoryDatatypesCoreBox, PyjectoryDatatypesCoreCapsule, PyjectoryDatatypesCoreConvexHull, PyjectoryDatatypesCoreCylinder, PyjectoryDatatypesCorePlane, PyjectoryDatatypesCoreRectangle, PyjectoryDatatypesCoreRectangularCapsule, PyjectoryDatatypesCoreSphere. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PyjectoryDatatypesCoreColliderShape with oneOf schemas: PyjectoryDatatypesCoreBox, PyjectoryDatatypesCoreCapsule, PyjectoryDatatypesCoreConvexHull, PyjectoryDatatypesCoreCylinder, PyjectoryDatatypesCorePlane, PyjectoryDatatypesCoreRectangle, PyjectoryDatatypesCoreRectangularCapsule, PyjectoryDatatypesCoreSphere. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PyjectoryDatatypesCoreBox, PyjectoryDatatypesCoreCapsule, PyjectoryDatatypesCoreConvexHull, PyjectoryDatatypesCoreCylinder, PyjectoryDatatypesCorePlane, PyjectoryDatatypesCoreRectangle, PyjectoryDatatypesCoreRectangularCapsule, PyjectoryDatatypesCoreSphere]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


