"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum


class MinSize(int, Enum):
    r"""images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against."""
    ZERO = 0
    ONE = 1


class Upscale(int, Enum):
    r"""allow images to be resized beyond native dimensions."""
    ZERO = 0
    ONE = 1


@dataclasses.dataclass
class GetResizedPhotoRequest:
    width: float = dataclasses.field(metadata={'query_param': { 'field_name': 'width', 'style': 'form', 'explode': True }})
    r"""The width for the resized photo"""
    height: float = dataclasses.field(metadata={'query_param': { 'field_name': 'height', 'style': 'form', 'explode': True }})
    r"""The height for the resized photo"""
    blur: float = dataclasses.field(metadata={'query_param': { 'field_name': 'blur', 'style': 'form', 'explode': True }})
    r"""The width for the resized photo"""
    min_size: MinSize = dataclasses.field(metadata={'query_param': { 'field_name': 'minSize', 'style': 'form', 'explode': True }})
    r"""images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against."""
    upscale: Upscale = dataclasses.field(metadata={'query_param': { 'field_name': 'upscale', 'style': 'form', 'explode': True }})
    r"""allow images to be resized beyond native dimensions."""
    url: str = dataclasses.field(metadata={'query_param': { 'field_name': 'url', 'style': 'form', 'explode': True }})
    r"""path to image within Plex"""
    opacity: int = dataclasses.field(default=100, metadata={'query_param': { 'field_name': 'opacity', 'style': 'form', 'explode': True }})
    r"""The opacity for the resized photo"""
    



@dataclasses.dataclass
class GetResizedPhotoResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    

