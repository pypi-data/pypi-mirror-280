"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum


class GetTransientTokenQueryParamType(str, Enum):
    r"""`delegation` - This is the only supported `type` parameter."""
    DELEGATION = 'delegation'


class Scope(str, Enum):
    r"""`all` - This is the only supported `scope` parameter."""
    ALL = 'all'


@dataclasses.dataclass
class GetTransientTokenRequest:
    type: GetTransientTokenQueryParamType = dataclasses.field(metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""`delegation` - This is the only supported `type` parameter."""
    scope: Scope = dataclasses.field(metadata={'query_param': { 'field_name': 'scope', 'style': 'form', 'explode': True }})
    r"""`all` - This is the only supported `scope` parameter."""
    



@dataclasses.dataclass
class GetTransientTokenResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    

