# generated by datamodel-codegen:
#   filename:  data_science_commit.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class ColumnDataType(Enum):
    integer = 'integer'
    float = 'float'
    string = 'string'


class ColumnTuple(BaseModel):
    columns: Sequence[conint(ge=0)]


class EnclaveSpecification(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class MaskType(Enum):
    genericString = 'genericString'
    genericNumber = 'genericNumber'
    name = 'name'
    address = 'address'
    postcode = 'postcode'
    phoneNumber = 'phoneNumber'
    socialSecurityNumber = 'socialSecurityNumber'
    email = 'email'
    date = 'date'
    timestamp = 'timestamp'
    iban = 'iban'


class MatchingComputationNode(BaseModel):
    config: str
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    output: str
    specificationId: str
    staticContentSpecificationId: str


class NumRowsValidationRule(BaseModel):
    atLeast: Optional[conint(ge=0)] = None
    atMost: Optional[conint(ge=0)] = None


class NumericRangeRule(BaseModel):
    greaterThan: Optional[float] = None
    greaterThanEquals: Optional[float] = None
    lessThan: Optional[float] = None
    lessThanEquals: Optional[float] = None


class PostComputationNode(BaseModel):
    dependency: str
    specificationId: str
    useMockBackend: bool


class PreviewComputationNode(BaseModel):
    dependency: str
    quotaBytes: conint(ge=0)


class RawLeafNode(BaseModel):
    pass


class S3Provider(Enum):
    Aws = 'Aws'
    Gcs = 'Gcs'


class S3SinkComputationNode(BaseModel):
    credentialsDependencyId: str
    endpoint: str
    region: Optional[str] = ''
    s3Provider: Optional[S3Provider] = 'Aws'
    specificationId: str
    uploadDependencyId: str


class Script(BaseModel):
    content: str
    name: str


class ScriptingLanguage(Enum):
    python = 'python'
    r = 'r'


class SqlNodePrivacyFilter(BaseModel):
    minimumRowsCount: int


class TableMapping(BaseModel):
    nodeId: str
    tableName: str


class UniquenessValidationRule(BaseModel):
    uniqueKeys: Sequence[ColumnTuple]


class ColumnDataFormat(BaseModel):
    dataType: ColumnDataType
    isNullable: bool


class ColumnValidationV0(BaseModel):
    allowNull: bool
    formatType: FormatType
    hashWith: Optional[HashingAlgorithm] = None
    inRange: Optional[NumericRangeRule] = None
    name: Optional[str] = None


class ComputationNodeKind4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    s3Sink: S3SinkComputationNode


class ComputationNodeKind5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    match: MatchingComputationNode


class ComputationNodeKindV25(ComputationNodeKind4):
    pass


class ComputationNodeKindV26(ComputationNodeKind5):
    pass


class ComputationNodeKindV27(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    post: PostComputationNode


class ComputationNodeKindV65(ComputationNodeKind4):
    pass


class ComputationNodeKindV66(ComputationNodeKind5):
    pass


class ComputationNodeKindV67(ComputationNodeKindV27):
    pass


class ComputationNodeKindV68(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    preview: PreviewComputationNode


class LeafNodeKind1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    raw: RawLeafNode


class LeafNodeKindV21(LeafNodeKind1):
    pass


class ScriptingComputationNode(BaseModel):
    additionalScripts: Sequence[Script]
    dependencies: Sequence[str]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    extraChunkCacheSizeToAvailableMemoryRatio: Optional[float] = None
    mainScript: Script
    minimumContainerMemorySize: Optional[conint(ge=0)] = None
    output: str
    scriptingLanguage: ScriptingLanguage
    scriptingSpecificationId: str
    staticContentSpecificationId: str


class SqlComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    privacyFilter: Optional[SqlNodePrivacyFilter] = None
    specificationId: str
    statement: str


class SqliteComputationNode(BaseModel):
    dependencies: Sequence[TableMapping]
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    sqliteSpecificationId: str
    statement: str
    staticContentSpecificationId: str


class SyntheticNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat
    index: int
    maskType: MaskType
    name: Optional[str] = None
    shouldMaskColumn: bool


class TableLeafNodeColumn(BaseModel):
    dataFormat: ColumnDataFormat
    name: str


class TableLeafNodeColumnV2(BaseModel):
    dataFormat: ColumnDataFormat
    name: str
    validation: ColumnValidationV0


class TableValidationV0(BaseModel):
    allowEmpty: Optional[bool] = None
    numRows: Optional[NumRowsValidationRule] = None
    uniqueness: Optional[UniquenessValidationRule] = None


class ValidationNodeV2(BaseModel):
    pythonSpecificationId: str
    staticContentSpecificationId: str
    validation: TableValidationV0


class ComputationNodeKind1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sql: SqlComputationNode


class ComputationNodeKind2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scripting: ScriptingComputationNode


class ComputationNodeKindV21(ComputationNodeKind1):
    pass


class ComputationNodeKindV22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sqlite: SqliteComputationNode


class ComputationNodeKindV23(ComputationNodeKind2):
    pass


class ComputationNodeKindV61(ComputationNodeKind1):
    pass


class ComputationNodeKindV62(ComputationNodeKindV22):
    pass


class ComputationNodeKindV63(ComputationNodeKind2):
    pass


class SyntheticDataComputationNode(BaseModel):
    columns: Sequence[SyntheticNodeColumn]
    dependency: str
    enableLogsOnError: bool
    enableLogsOnSuccess: bool
    epsilon: float
    outputOriginalDataStatistics: bool
    staticContentSpecificationId: str
    synthSpecificationId: str


class TableLeafNode(BaseModel):
    columns: Sequence[TableLeafNodeColumn]
    sqlSpecificationId: str


class TableLeafNodeV2(BaseModel):
    columns: Sequence[TableLeafNodeColumnV2]
    validationNode: ValidationNodeV2


class ComputationNodeKind3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    syntheticData: SyntheticDataComputationNode


class ComputationNodeKind(
    RootModel[
        Union[
            ComputationNodeKind1,
            ComputationNodeKind2,
            ComputationNodeKind3,
            ComputationNodeKind4,
            ComputationNodeKind5,
        ]
    ]
):
    root: Union[
        ComputationNodeKind1,
        ComputationNodeKind2,
        ComputationNodeKind3,
        ComputationNodeKind4,
        ComputationNodeKind5,
    ]


class ComputationNodeKindV24(ComputationNodeKind3):
    pass


class ComputationNodeKindV2(
    RootModel[
        Union[
            ComputationNodeKindV21,
            ComputationNodeKindV22,
            ComputationNodeKindV23,
            ComputationNodeKindV24,
            ComputationNodeKindV25,
            ComputationNodeKindV26,
            ComputationNodeKindV27,
        ]
    ]
):
    root: Union[
        ComputationNodeKindV21,
        ComputationNodeKindV22,
        ComputationNodeKindV23,
        ComputationNodeKindV24,
        ComputationNodeKindV25,
        ComputationNodeKindV26,
        ComputationNodeKindV27,
    ]


class ComputationNodeKindV64(ComputationNodeKind3):
    pass


class ComputationNodeKindV6(
    RootModel[
        Union[
            ComputationNodeKindV61,
            ComputationNodeKindV62,
            ComputationNodeKindV63,
            ComputationNodeKindV64,
            ComputationNodeKindV65,
            ComputationNodeKindV66,
            ComputationNodeKindV67,
            ComputationNodeKindV68,
        ]
    ]
):
    root: Union[
        ComputationNodeKindV61,
        ComputationNodeKindV62,
        ComputationNodeKindV63,
        ComputationNodeKindV64,
        ComputationNodeKindV65,
        ComputationNodeKindV66,
        ComputationNodeKindV67,
        ComputationNodeKindV68,
    ]


class ComputationNodeV2(BaseModel):
    kind: ComputationNodeKindV2


class ComputationNodeV6(BaseModel):
    kind: ComputationNodeKindV6


class LeafNodeKind2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    table: TableLeafNode


class LeafNodeKind(RootModel[Union[LeafNodeKind1, LeafNodeKind2]]):
    root: Union[LeafNodeKind1, LeafNodeKind2]


class LeafNodeKindV22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    table: TableLeafNodeV2


class LeafNodeKindV2(RootModel[Union[LeafNodeKindV21, LeafNodeKindV22]]):
    root: Union[LeafNodeKindV21, LeafNodeKindV22]


class LeafNodeV2(BaseModel):
    isRequired: bool
    kind: LeafNodeKindV2


class NodeKindV21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    leaf: LeafNodeV2


class NodeKindV22(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNodeV2


class NodeKindV2(RootModel[Union[NodeKindV21, NodeKindV22]]):
    root: Union[NodeKindV21, NodeKindV22]


class NodeKindV61(NodeKindV21):
    pass


class NodeKindV62(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNodeV6


class NodeKindV6(RootModel[Union[NodeKindV61, NodeKindV62]]):
    root: Union[NodeKindV61, NodeKindV62]


class NodeV2(BaseModel):
    id: str
    kind: NodeKindV2
    name: str


class NodeV6(BaseModel):
    id: str
    kind: NodeKindV6
    name: str


class AddComputationCommitV2(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV2


class AddComputationCommitV6(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: NodeV6


class ComputationNode(BaseModel):
    kind: ComputationNodeKind


class DataScienceCommitKindV21(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommitV2


class DataScienceCommitKindV2(RootModel[DataScienceCommitKindV21]):
    root: DataScienceCommitKindV21


class DataScienceCommitKindV61(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommitV6


class DataScienceCommitKindV6(RootModel[DataScienceCommitKindV61]):
    root: DataScienceCommitKindV61


class DataScienceCommitV2(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV2
    name: str


class DataScienceCommitV3(DataScienceCommitV2):
    pass


class DataScienceCommitV4(DataScienceCommitV2):
    pass


class DataScienceCommitV5(DataScienceCommitV2):
    pass


class DataScienceCommitV6(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKindV6
    name: str


class LeafNode(BaseModel):
    isRequired: bool
    kind: LeafNodeKind


class NodeKind1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    leaf: LeafNode


class NodeKind2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    computation: ComputationNode


class NodeKind(RootModel[Union[NodeKind1, NodeKind2]]):
    root: Union[NodeKind1, NodeKind2]


class DataScienceCommit3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: DataScienceCommitV2


class DataScienceCommit4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: DataScienceCommitV3


class DataScienceCommit5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: DataScienceCommitV4


class DataScienceCommit6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: DataScienceCommitV5


class DataScienceCommit7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: DataScienceCommitV6


class Node(BaseModel):
    id: str
    kind: NodeKind
    name: str


class AddComputationCommit(BaseModel):
    analysts: Sequence[str]
    enclaveSpecifications: Sequence[EnclaveSpecification]
    node: Node


class DataScienceCommitKind1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    addComputation: AddComputationCommit


class DataScienceCommitKind(RootModel[DataScienceCommitKind1]):
    root: DataScienceCommitKind1


class DataScienceCommitV0(BaseModel):
    enclaveDataRoomId: str
    historyPin: str
    id: str
    kind: DataScienceCommitKind
    name: str


class DataScienceCommitV1(DataScienceCommitV0):
    pass


class DataScienceCommit1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: DataScienceCommitV0


class DataScienceCommit2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: DataScienceCommitV1


class DataScienceCommit(
    RootModel[
        Union[
            DataScienceCommit1,
            DataScienceCommit2,
            DataScienceCommit3,
            DataScienceCommit4,
            DataScienceCommit5,
            DataScienceCommit6,
            DataScienceCommit7,
        ]
    ]
):
    root: Union[
        DataScienceCommit1,
        DataScienceCommit2,
        DataScienceCommit3,
        DataScienceCommit4,
        DataScienceCommit5,
        DataScienceCommit6,
        DataScienceCommit7,
    ] = Field(..., title='DataScienceCommit')
