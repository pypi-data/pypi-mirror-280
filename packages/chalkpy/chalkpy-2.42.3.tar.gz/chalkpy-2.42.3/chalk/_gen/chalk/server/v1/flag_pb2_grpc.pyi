"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.flag_pb2 import (
    GetFeatureFlagsRequest,
    GetFeatureFlagsResponse,
    SetFeatureFlagRequest,
    SetFeatureFlagResponse,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar("_T")

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta): ...
class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class FeatureFlagServiceStub:
    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    GetFeatureFlags: UnaryUnaryMultiCallable[
        GetFeatureFlagsRequest,
        GetFeatureFlagsResponse,
    ]
    SetFeatureFlag: UnaryUnaryMultiCallable[
        SetFeatureFlagRequest,
        SetFeatureFlagResponse,
    ]

class FeatureFlagServiceAsyncStub:
    GetFeatureFlags: UnaryUnaryMultiCallable[
        GetFeatureFlagsRequest,
        GetFeatureFlagsResponse,
    ]
    SetFeatureFlag: UnaryUnaryMultiCallable[
        SetFeatureFlagRequest,
        SetFeatureFlagResponse,
    ]

class FeatureFlagServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def GetFeatureFlags(
        self,
        request: GetFeatureFlagsRequest,
        context: _ServicerContext,
    ) -> Union[GetFeatureFlagsResponse, Awaitable[GetFeatureFlagsResponse]]: ...
    @abstractmethod
    def SetFeatureFlag(
        self,
        request: SetFeatureFlagRequest,
        context: _ServicerContext,
    ) -> Union[SetFeatureFlagResponse, Awaitable[SetFeatureFlagResponse]]: ...

def add_FeatureFlagServiceServicer_to_server(
    servicer: FeatureFlagServiceServicer, server: Union[Server, Server]
) -> None: ...
