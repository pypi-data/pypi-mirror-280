"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.auth_pb2 import (
    GetTokenRequest,
    GetTokenResponse,
    UpdateLinkSessionRequest,
    UpdateLinkSessionResponse,
)
from chalk._gen.chalk.server.v1.link_pb2 import (
    CreateLinkSessionRequest,
    CreateLinkSessionResponse,
    GetLinkSessionRequest,
    GetLinkSessionResponse,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar("_T")

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta): ...
class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class AuthServiceStub:
    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    GetToken: UnaryUnaryMultiCallable[
        GetTokenRequest,
        GetTokenResponse,
    ]
    CreateLinkSession: UnaryUnaryMultiCallable[
        CreateLinkSessionRequest,
        CreateLinkSessionResponse,
    ]
    GetLinkSession: UnaryUnaryMultiCallable[
        GetLinkSessionRequest,
        GetLinkSessionResponse,
    ]
    UpdateLinkSession: UnaryUnaryMultiCallable[
        UpdateLinkSessionRequest,
        UpdateLinkSessionResponse,
    ]

class AuthServiceAsyncStub:
    GetToken: UnaryUnaryMultiCallable[
        GetTokenRequest,
        GetTokenResponse,
    ]
    CreateLinkSession: UnaryUnaryMultiCallable[
        CreateLinkSessionRequest,
        CreateLinkSessionResponse,
    ]
    GetLinkSession: UnaryUnaryMultiCallable[
        GetLinkSessionRequest,
        GetLinkSessionResponse,
    ]
    UpdateLinkSession: UnaryUnaryMultiCallable[
        UpdateLinkSessionRequest,
        UpdateLinkSessionResponse,
    ]

class AuthServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def GetToken(
        self,
        request: GetTokenRequest,
        context: _ServicerContext,
    ) -> Union[GetTokenResponse, Awaitable[GetTokenResponse]]: ...
    @abstractmethod
    def CreateLinkSession(
        self,
        request: CreateLinkSessionRequest,
        context: _ServicerContext,
    ) -> Union[CreateLinkSessionResponse, Awaitable[CreateLinkSessionResponse]]: ...
    @abstractmethod
    def GetLinkSession(
        self,
        request: GetLinkSessionRequest,
        context: _ServicerContext,
    ) -> Union[GetLinkSessionResponse, Awaitable[GetLinkSessionResponse]]: ...
    @abstractmethod
    def UpdateLinkSession(
        self,
        request: UpdateLinkSessionRequest,
        context: _ServicerContext,
    ) -> Union[UpdateLinkSessionResponse, Awaitable[UpdateLinkSessionResponse]]: ...

def add_AuthServiceServicer_to_server(servicer: AuthServiceServicer, server: Union[Server, Server]) -> None: ...
