"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.graph_pb2 import (
    GetFeatureSQLRequest,
    GetFeatureSQLResponse,
    GetFeaturesMetadataRequest,
    GetFeaturesMetadataResponse,
    GetGraphRequest,
    GetGraphResponse,
    UpdateGraphRequest,
    UpdateGraphResponse,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar("_T")

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta): ...
class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class GraphServiceStub:
    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    GetFeatureSQL: UnaryUnaryMultiCallable[
        GetFeatureSQLRequest,
        GetFeatureSQLResponse,
    ]
    """GetFeatureSQL returns the feature SQLs for a given deployment."""
    GetFeaturesMetadata: UnaryUnaryMultiCallable[
        GetFeaturesMetadataRequest,
        GetFeaturesMetadataResponse,
    ]
    GetGraph: UnaryUnaryMultiCallable[
        GetGraphRequest,
        GetGraphResponse,
    ]
    UpdateGraph: UnaryUnaryMultiCallable[
        UpdateGraphRequest,
        UpdateGraphResponse,
    ]
    """UpdateGraph uploads the protobuf graph for a given deployment."""

class GraphServiceAsyncStub:
    GetFeatureSQL: UnaryUnaryMultiCallable[
        GetFeatureSQLRequest,
        GetFeatureSQLResponse,
    ]
    """GetFeatureSQL returns the feature SQLs for a given deployment."""
    GetFeaturesMetadata: UnaryUnaryMultiCallable[
        GetFeaturesMetadataRequest,
        GetFeaturesMetadataResponse,
    ]
    GetGraph: UnaryUnaryMultiCallable[
        GetGraphRequest,
        GetGraphResponse,
    ]
    UpdateGraph: UnaryUnaryMultiCallable[
        UpdateGraphRequest,
        UpdateGraphResponse,
    ]
    """UpdateGraph uploads the protobuf graph for a given deployment."""

class GraphServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def GetFeatureSQL(
        self,
        request: GetFeatureSQLRequest,
        context: _ServicerContext,
    ) -> Union[GetFeatureSQLResponse, Awaitable[GetFeatureSQLResponse]]:
        """GetFeatureSQL returns the feature SQLs for a given deployment."""
    @abstractmethod
    def GetFeaturesMetadata(
        self,
        request: GetFeaturesMetadataRequest,
        context: _ServicerContext,
    ) -> Union[GetFeaturesMetadataResponse, Awaitable[GetFeaturesMetadataResponse]]: ...
    @abstractmethod
    def GetGraph(
        self,
        request: GetGraphRequest,
        context: _ServicerContext,
    ) -> Union[GetGraphResponse, Awaitable[GetGraphResponse]]: ...
    @abstractmethod
    def UpdateGraph(
        self,
        request: UpdateGraphRequest,
        context: _ServicerContext,
    ) -> Union[UpdateGraphResponse, Awaitable[UpdateGraphResponse]]:
        """UpdateGraph uploads the protobuf graph for a given deployment."""

def add_GraphServiceServicer_to_server(servicer: GraphServiceServicer, server: Union[Server, Server]) -> None: ...
