"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.deploy_pb2 import (
    DeployBranchRequest,
    DeployBranchResponse,
    GetDeploymentRequest,
    GetDeploymentResponse,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar("_T")

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta): ...
class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class DeployServiceStub:
    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    DeployBranch: UnaryUnaryMultiCallable[
        DeployBranchRequest,
        DeployBranchResponse,
    ]
    GetDeployment: UnaryUnaryMultiCallable[
        GetDeploymentRequest,
        GetDeploymentResponse,
    ]

class DeployServiceAsyncStub:
    DeployBranch: UnaryUnaryMultiCallable[
        DeployBranchRequest,
        DeployBranchResponse,
    ]
    GetDeployment: UnaryUnaryMultiCallable[
        GetDeploymentRequest,
        GetDeploymentResponse,
    ]

class DeployServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def DeployBranch(
        self,
        request: DeployBranchRequest,
        context: _ServicerContext,
    ) -> Union[DeployBranchResponse, Awaitable[DeployBranchResponse]]: ...
    @abstractmethod
    def GetDeployment(
        self,
        request: GetDeploymentRequest,
        context: _ServicerContext,
    ) -> Union[GetDeploymentResponse, Awaitable[GetDeploymentResponse]]: ...

def add_DeployServiceServicer_to_server(servicer: DeployServiceServicer, server: Union[Server, Server]) -> None: ...
