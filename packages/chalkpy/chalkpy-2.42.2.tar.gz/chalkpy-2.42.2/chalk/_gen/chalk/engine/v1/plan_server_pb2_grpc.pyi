"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.engine.v1.plan_server_pb2 import (
    ExecuteQueryRequest,
    ExecuteQueryResponse,
    GetPlanRequest,
    GetPlanResponse,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar("_T")

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta): ...
class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class PlanServiceStub:
    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    GetPlan: UnaryUnaryMultiCallable[
        GetPlanRequest,
        GetPlanResponse,
    ]
    ExecuteQuery: UnaryUnaryMultiCallable[
        ExecuteQueryRequest,
        ExecuteQueryResponse,
    ]
    """Fall-back for executing queries on the python engine"""

class PlanServiceAsyncStub:
    GetPlan: UnaryUnaryMultiCallable[
        GetPlanRequest,
        GetPlanResponse,
    ]
    ExecuteQuery: UnaryUnaryMultiCallable[
        ExecuteQueryRequest,
        ExecuteQueryResponse,
    ]
    """Fall-back for executing queries on the python engine"""

class PlanServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def GetPlan(
        self,
        request: GetPlanRequest,
        context: _ServicerContext,
    ) -> Union[GetPlanResponse, Awaitable[GetPlanResponse]]: ...
    @abstractmethod
    def ExecuteQuery(
        self,
        request: ExecuteQueryRequest,
        context: _ServicerContext,
    ) -> Union[ExecuteQueryResponse, Awaitable[ExecuteQueryResponse]]:
        """Fall-back for executing queries on the python engine"""

def add_PlanServiceServicer_to_server(servicer: PlanServiceServicer, server: Union[Server, Server]) -> None: ...
