"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.billing_pb2 import (
    GetNodesRequest,
    GetNodesResponse,
    GetUsageChartRequest,
    GetUsageChartResponse,
    GetUtilizationRatesRequest,
    GetUtilizationRatesResponse,
)
from collections.abc import (
    AsyncIterator,
    Awaitable,
    Iterator,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from grpc.aio import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)
from typing import (
    TypeVar,
    Union,
)

_T = TypeVar("_T")

class _MaybeAsyncIterator(AsyncIterator[_T], Iterator[_T], metaclass=ABCMeta): ...
class _ServicerContext(ServicerContext, ServicerContext):  # type: ignore
    ...

class BillingServiceStub:
    def __init__(self, channel: Union[Channel, Channel]) -> None: ...
    GetNodes: UnaryUnaryMultiCallable[
        GetNodesRequest,
        GetNodesResponse,
    ]
    GetUsageChart: UnaryUnaryMultiCallable[
        GetUsageChartRequest,
        GetUsageChartResponse,
    ]
    GetUtilizationRates: UnaryUnaryMultiCallable[
        GetUtilizationRatesRequest,
        GetUtilizationRatesResponse,
    ]

class BillingServiceAsyncStub:
    GetNodes: UnaryUnaryMultiCallable[
        GetNodesRequest,
        GetNodesResponse,
    ]
    GetUsageChart: UnaryUnaryMultiCallable[
        GetUsageChartRequest,
        GetUsageChartResponse,
    ]
    GetUtilizationRates: UnaryUnaryMultiCallable[
        GetUtilizationRatesRequest,
        GetUtilizationRatesResponse,
    ]

class BillingServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def GetNodes(
        self,
        request: GetNodesRequest,
        context: _ServicerContext,
    ) -> Union[GetNodesResponse, Awaitable[GetNodesResponse]]: ...
    @abstractmethod
    def GetUsageChart(
        self,
        request: GetUsageChartRequest,
        context: _ServicerContext,
    ) -> Union[GetUsageChartResponse, Awaitable[GetUsageChartResponse]]: ...
    @abstractmethod
    def GetUtilizationRates(
        self,
        request: GetUtilizationRatesRequest,
        context: _ServicerContext,
    ) -> Union[GetUtilizationRatesResponse, Awaitable[GetUtilizationRatesResponse]]: ...

def add_BillingServiceServicer_to_server(servicer: BillingServiceServicer, server: Union[Server, Server]) -> None: ...
