################################################################################
# oops/hosts/hst/nicmos/__init__.py: HST subclass NICMOS
#
# 5/21/12 MRS - corrected super().register_frame() so that it works for NICMOS
#   images; local method deleted.
################################################################################

try:
    import astropy.io.fits as pyfits
except ImportError:
    import pyfits
import oops
from .. import HST

################################################################################
# Standard class methods
################################################################################

def from_file(filespec, **parameters):
    """A general, static method to return an Observation object based on a given
    data file generated by HST/NICMOS.
    """

    # Open the file
    hst_file = pyfits.open(filespec)

    # Make an instance of the NICMOS class
    this = NICMOS()

    # Confirm that the telescope is HST
    if this.telescope_name(hst_file) != "HST":
        raise IOError("not an HST file: " + this.filespec(hst_file))

    # Confirm that the instrument is NICMOS
    if this.instrument_name(hst_file) != "NICMOS":
        raise IOError("not an HST/NICMOS file: " + this.filespec(hst_file))

    return NICMOS.from_opened_fitsfile(hst_file, **parameters)

# For each NICMOS detector, IDC_DICT returns a sub-dictionary of IDC parameters
# keyed by (FILTER,).
IDC_DICT = {"NIC1":None, "NIC2": None, "NIC3": None}

# These SYN file names apply to every NICMOS detector
NICMOS_SYN_FILES = ["OTA/hst_ota_???_syn.fits",
                    "NICMOS/nic_bend1_???_syn.fits",
                    "NICMOS/nic_primary_???_syn.fits",
                    "NICMOS/nic_pupil_???_syn.fits",
                    "NICMOS/nic_reimag_???_syn.fits",
                    "NICMOS/nic_secondary_???_syn.fits"]

#===============================================================================
#===============================================================================
class NICMOS(HST):
    """This class defines functions and properties unique to the NICMOS
    instrument. Everything else is inherited from higher levels in the class
    hierarchy.

    Objects of this class are empty; they only exist to support inheritance.
    """

    #===========================================================================
    # The detector name for NICMOS must be extracted from the aperture
    def detector_name(self, hst_file):
        """The name of the detector on the HST instrument that was used to
        obtain this file.
        """

        return hst_file[0].header["APERTURE"][0:4]

    #===========================================================================
    # All NICMOS detectors have a single filter wheel. The name is identified by
    # FITS parameter FILTER.
    def filter_name(self, hst_file):
        """The name of the filter for this particular NICMOS detector."""

        return hst_file[0].header["FILTER"]

    #===========================================================================
    # The IDC dictionaries for NICMOS detectors are all keyed by (FILTER,).
    def define_fov(self, hst_file, **parameters):
        """An FOV object defining the field of view of the given image file."""

        global IDC_DICT

        # Identify the detector
        det = self.detector_name(hst_file)

        # Load the dictionary of IDC parameters if necessary
        if IDC_DICT[det] is None:
            IDC_DICT[det] = self.load_idc_dict(hst_file, ("FILTER",))

        # Define the key into the dictionary
        idc_key = (hst_file[0].header["FILTER"],)

        return self.construct_fov(IDC_DICT[det][idc_key], hst_file)

    #===========================================================================
    def select_syn_files(self, hst_file, **parameters):
        """The list of SYN files containing profiles that are to be multiplied
        together to obtain the throughput of the given instrument, detector and
        filter combination.
        """

        global NICMOS_SYN_FILES

        # Copy all the NICMOS general file names
        syn_filenames = []
        for filename in NICMOS_SYN_FILES:
            syn_filenames.append(filename)

        # Append all the detector-specific file names
        for filename in self.DETECTOR_SYN_FILES:
            syn_filenames.append(filename)

        # Add the filter file name
        syn_filenames.append(self.FILTER_SYN_FILE_PARTS[0] +
                             hst_file[0].header["FILTER"].lower() +
                             self.FILTER_SYN_FILE_PARTS[1])

        return syn_filenames

    #===========================================================================
    def dn_per_sec_factor(self, hst_file):
        """The factor that converts a pixel value to DN per second.

        Input:
            hst_file        the object returned by pyfits.open()

        Return              the factor to multiply a pixel value by to get DN/sec
        """

        return 1.

    #===========================================================================
    @staticmethod
    def from_opened_fitsfile(hst_file, **parameters):
        """A general, static method to return an Observation object based on an
        HST data file generated by HST/NICMOS.
        """

        # Make an instance of the NICMOS class
        this = NICMOS()

        # Figure out the detector
        detector = this.detector_name(hst_file)

        if detector == "NIC1":
            from .nic1 import NIC1
            obs = NIC1.from_opened_fitsfile( hst_file, **parameters)

        elif detector == "NIC2":
            from .nic2 import NIC2
            obs = NIC2.from_opened_fitsfile(hst_file, **parameters)

        elif detector == "NIC3":
            from .nic3 import NIC3
            obs = NIC3.from_opened_fitsfile(hst_file, **parameters)

        else:
            raise IOError("unrecognized detector in HST/NICMOS file " +
                          this.filespec(hst_file) + ": " + detector)

        return obs

################################################################################
