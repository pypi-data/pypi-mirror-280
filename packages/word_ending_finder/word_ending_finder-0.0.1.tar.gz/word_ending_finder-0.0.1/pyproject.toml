# MARK: BUILD
[build-system]
requires = ["hatch"]
build-backend = "hatchling.build"

# MARK: PROJECT
[project]
name = "word_ending_finder"
description = "test project"
readme = "README.md"
requires-python = ">=3.8, <4"
license = { text = "MIT License" }
keywords = [""]
authors = [{ name = "AbsoluteWinter" }]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Natural Language :: English",
]
dependencies = [
    "click>=8.0.0",
    "unidecode",
    # "importlib_resources; python_version < '3.10'",
]
dynamic = ["version"]

# [project.urls]
# Homepage = ""
# Documentation = ""
# Repository = "https://github.com/absolutewinter/<REPO>"
# Issues = "https://github.com/absolutewinter/<REPO>/issues"

[project.scripts]
wef = "word_ending_finder.__main__:main"

[project.optional-dependencies]
dev = ["hatch", "pytest>=7.0.0"]

# MARK: TOOL - hatch
[tool.hatch.version]
path = "src/word_ending_finder/__init__.py"

[tool.hatch.build.targets.sdist]
only-include = ["src", "tests", "docs"]

[tool.hatch.envs.default]
# features = [""]
description = """
Default environment
"""

[tool.hatch.envs.all]
dependencies = ["coverage[toml]", "pytest-cov", "pytest"]
description = """
All supported python versions to test

Usage:
hatch run all:test
"""

[tool.hatch.envs.all.scripts]
test = "pytest {args:tests}" # use this
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"] # use this
cov2 = "pytest --cov-report=term-missing --cov=word_ending_finder --cov=tests" # use this

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.checker]
dependencies = ["mypy>=1.1.0", "ruff"]
detached = true
skip-install = true
description = """
Lint and type check
"""

[tool.hatch.envs.checker.scripts]
check = [
    "ruff check",
    "mypy --install-types --non-interactive {args:src/word_ending_finder}",
]
fmt = "ruff format"

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=7.0.0",
    "sphinx_rtd_theme",
    "sphinx_copybutton",
    "myst-parser", # Markdown parser
    "sphinx-autobuild", # Live preview build
    "watchfiles", # sphinx-autobuild support library
]
description = """
Build documentation

Main cmds:
- build: Build documentation
- live: Live preview of documentation
"""

[tool.hatch.envs.docs.scripts]
generate = "sphinx-apidoc -o docs/ src/word_ending_finder"
build = ["generate", "sphinx-build docs docs/build"]
live = ["generate", "sphinx-autobuild docs docs/build"]

[tool.hatch.envs.workflow]
detached = true
skip-install = true
description = """
Package workflow
"""

[tool.hatch.envs.workflow.scripts]
prebuilt = [
    "hatch run checker:fmt", # Format code
    "hatch run checker:check", # Lint and type check
    "hatch run all:test", # Run tests in all supported python versions
    "hatch run docs:build", # Build documentation
]
build = [
    "prebuilt",
    "hatch clean", # Clean dist/
    "hatch build", # Build package
]
release = [
    "build",
    "hatch publish", # Publish to PyPI
]

# MARK: TOOL - pytest
[tool.pytest.ini_options]
addopts = ["--strict-markers", "--maxfail=1"]
markers = ["test_this: Select desire test to test"] # pytest -m <marker> [-v]

# MARK: TOOL - mypy
[tool.mypy]
mypy_path = "src"
check_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true
# python_version = "3.8"
# disallow_any_generics = true

# MARK: TOOL - ruff
[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py38"
include = ["pyproject.toml", "src/**", "tests/**"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
exclude = ["*.json", "*.pkl"]

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "B", "Q"]
unfixable = ["B"]
exclude = ["*.json", "*.pkl"]
ignore = [
    "E266", # too many leading "#" for block comment
    "E501", # line too long
    "W291", # trailing whitespace
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402", # module level import not at top of file
    "F401", # imported but unused
]

# MARK: TOOL - black
[tool.black]
line-length = 88