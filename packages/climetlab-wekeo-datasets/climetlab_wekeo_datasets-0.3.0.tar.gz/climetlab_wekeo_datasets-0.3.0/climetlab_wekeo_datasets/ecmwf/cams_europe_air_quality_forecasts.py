#!/usr/bin/env python3
# (C) Copyright 2023 European Centre for Medium-Range Weather Forecasts.
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.
from __future__ import annotations

from climetlab.decorators import normalize

from climetlab_wekeo_datasets.ecmwf.main import Main


class cams_europe_air_quality_forecasts(Main):
    name = "EO:ECMWF:DAT:CAMS_EUROPE_AIR_QUALITY_FORECASTS"
    dataset = "EO:ECMWF:DAT:CAMS_EUROPE_AIR_QUALITY_FORECASTS"

    @normalize(
        "leadtime_hour",
        [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
        ],
        multiple=True,
    )
    @normalize(
        "level",
        [
            "0",
            "50",
            "100",
            "250",
            "500",
            "750",
            "1000",
            "2000",
            "3000",
            "5000",
        ],
        multiple=True,
    )
    @normalize(
        "model",
        [
            "chimere",
            "dehm",
            "emep",
            "ensemble",
            "euradim",
            "gemaq",
            "lotos",
            "match",
            "minni",
            "mocage",
            "monarch",
            "silam",
        ],
        multiple=True,
    )
    @normalize(
        "time",
        [
            "00:00",
            "01:00",
            "02:00",
            "03:00",
            "04:00",
            "05:00",
            "06:00",
            "07:00",
            "08:00",
            "09:00",
            "10:00",
            "11:00",
            "12:00",
            "13:00",
            "14:00",
            "15:00",
            "16:00",
            "17:00",
            "18:00",
            "19:00",
            "20:00",
            "21:00",
            "22:00",
            "23:00",
        ],
        multiple=True,
    )
    @normalize(
        "type",
        [
            "analysis",
            "forecast",
        ],
        multiple=True,
    )
    @normalize(
        "variable",
        [
            "alder_pollen",
            "ammonia",
            "birch_pollen",
            "carbon_monoxide",
            "dust",
            "formaldehyde",
            "glyoxal",
            "grass_pollen",
            "mugwort_pollen",
            "nitrogen_dioxide",
            "nitrogen_monoxide",
            "non_methane_vocs",
            "olive_pollen",
            "ozone",
            "particulate_matter_10um",
            "particulate_matter_2.5um",
            "peroxyacyl_nitrates",
            "pm10_sea_salt_dry",
            "pm10_wildfires",
            "pm2.5_total_organic_matter",
            "ragweed_pollen",
            "residential_elementary_carbon",
            "secondary_inorganic_aerosol",
            "sulphur_dioxide",
            "total_elementary_carbon",
        ],
        multiple=True,
    )
    @normalize("dtend", "date(%Y-%m-%dT%H:%M:%S.%fZ)")
    @normalize("dtstart", "date(%Y-%m-%dT%H:%M:%S.%fZ)")
    @normalize("bbox", "bounding-box(list)")
    @normalize(
        "format_",
        [
            "grib",
            "netcdf",
        ],
    )
    def __init__(
        self,
        leadtime_hour,
        level,
        model,
        time,
        type,
        variable,
        dtend="2024-05-21",
        dtstart="2020-08-25",
        bbox=None,
        format_=None,
        limit=None,
    ):
        super().__init__(
            leadtime_hour=leadtime_hour,
            level=level,
            model=model,
            time=time,
            type=type,
            variable=variable,
            dtend=dtend,
            dtstart=dtstart,
            bbox=bbox,
            format_=format_,
            limit=limit,
        )
