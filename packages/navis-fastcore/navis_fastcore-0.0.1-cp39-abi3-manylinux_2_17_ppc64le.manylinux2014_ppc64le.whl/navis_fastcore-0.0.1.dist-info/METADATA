Metadata-Version: 2.3
Name: navis-fastcore
Version: 0.0.1
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Rust
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: numpy >=1.21.0
License-File: LICENSE
Summary: NAVis core functions reimplemented in Rust.
Author-email: Philipp Schlegel <pms70@cam.ac.uk>
Requires-Python: >=3.9
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM

# fastcore-rs [WIP]
Rust re-implementation of `navis` core functions. This is an experiment to test
replacing Cython with Rust for
[navis-fastcore](https://github.com/navis-org/fastcore) to enable cross-platform
usage of the library.

## Notes
- internally, we use `i32` to represent node indices which means we can't
  process neurons with more than 2,147,483,647 nodes (should be fine)

## TO-DOs
- [x] geodesic distances
- [x] generation of segments
- [x] Nearest-neighbor lookup (via `bosque`)
- [x] synapse flow centrality
- [ ] NBLAST
- [ ] shortest paths
- [ ] cater for `i32` node IDs (currently only `i64` supported)

## Build
1. `cd` into directory
2. Activate virtual environment: `source .venv/bin/activate`
3. Run `maturin develop` (use `maturin build --release` to build wheel)

## Test

First make sure `pytest` is installed:
```
pip install pytest -U
```

Then run the test-suite like so:
```
pytest --verbose -s
```

Note that unless you compiled with `maturin develop --release` the timings will
be much slower (up to 10x) than in a release build.

