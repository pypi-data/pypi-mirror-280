{"version":3,"file":"lib_index_js.b573e3cab2ccd992ebb8.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAC4H;AAC7B;AAC/F,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,4JAA4J,whBAAwhB,4EAA4E,sDAAsD,wDAAwD,oCAAoC,wCAAwC,GAAG,yGAAyG,kBAAkB,GAAG,SAAS,+FAA+F,MAAM,KAAK,YAAY,aAAa,aAAa,aAAa,aAAa,OAAO,OAAO,UAAU,2IAA2I,whBAAwhB,4EAA4E,sDAAsD,wDAAwD,oCAAoC,wCAAwC,GAAG,yGAAyG,kBAAkB,GAAG,qBAAqB;AACr0E;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;ACPwD;AAC/F,YAA6F;;AAE7F;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,sFAAO;;;;AAIxB,iEAAe,6FAAc,MAAM;;;;;;;;;;ACZtB;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B,GAAG,2BAA2B,GAAG,gCAAgC;AAC3F,mBAAmB,mBAAO,CAAC,wFAAiB;AAC5C,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,gCAAgC;AAChC,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB;AAC/D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B;AAC1B;;;;;;;;;;AChFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,mBAAO,CAAC,6CAAoB;AAC5B,0BAA0B,mBAAO,CAAC,6GAAwB;AAC1D,wBAAwB,mBAAO,CAAC,uGAAsB;AACtD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,gBAAgB,mBAAO,CAAC,4EAAmB;AAC3C,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,oBAAoB,mBAAO,CAAC,oFAAuB;AACnD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,wBAAwB,mBAAO,CAAC,4FAA2B;AAC3D,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C,mBAAmB,mBAAO,CAAC,0EAAkB;AAC7C,gCAAgC,mBAAO,CAAC,oDAAO;AAC/C,6BAA6B,mBAAO,CAAC,yDAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iIAAiI;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uCAAuC,YAAY,yBAAyB,eAAe;AAC3F;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB,GAAG,8CAA8C,GAAG,yCAAyC,GAAG,cAAc;AAC5K,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,0JAA0J,IAAI,mBAAmB;AAC5O,qFAAqF;AACrF;AACA,qBAAqB;AACrB;AACA,uBAAuB;AACvB,2DAA2D,mBAAmB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA,kDAAkD;AAClD,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,mBAAmB,2BAA2B,IAAI,sBAAsB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,oCAAoC;AAC1F;AACA;AACA;AACA,oEAAoE,wYAAwY;AAC5c;AACA;AACA,yBAAyB;AACzB;;;;;;;;;;AC1Za;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,mBAAO,CAAC,6CAAoB;AAC5B,wBAAwB,mBAAO,CAAC,uGAAsB;AACtD,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,yBAAyB,mBAAO,CAAC,8FAA4B;AAC7D,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,6BAA6B,mBAAO,CAAC,yDAAsB;AAC3D,4BAA4B,mBAAO,CAAC,uDAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sDAAsD,8CAA8C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf","sources":["webpack://@elyra/code-snippet-extension/./style/index.css","webpack://@elyra/code-snippet-extension/./style/index.css?f019","webpack://@elyra/code-snippet-extension/./lib/CodeSnippetService.js","webpack://@elyra/code-snippet-extension/./lib/CodeSnippetWidget.js","webpack://@elyra/code-snippet-extension/./lib/index.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\n * Copyright 2018-2023 Elyra Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n.elyra-codeSnippet-drag-image {\\n  border: var(--jp-border-width) solid var(--jp-cell-editor-border-color);\\n  width: var(--jp-private-notebook-dragImage-width);\\n  height: var(--jp-private-notebook-dragImage-height);\\n  color: var(--jp-ui-font-color1);\\n  background: var(--jp-layout-color1);\\n}\\n\\n.elyra-metadata-code-snippets\\n  .elyra-metadata-item\\n  .elyra-expandableContainer-details-visible {\\n  height: 100px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/index.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;EAcE;;AAEF;EACE,uEAAuE;EACvE,iDAAiD;EACjD,mDAAmD;EACnD,+BAA+B;EAC/B,mCAAmC;AACrC;;AAEA;;;EAGE,aAAa;AACf\",\"sourcesContent\":[\"/*\\n * Copyright 2018-2023 Elyra Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n.elyra-codeSnippet-drag-image {\\n  border: var(--jp-border-width) solid var(--jp-cell-editor-border-color);\\n  width: var(--jp-private-notebook-dragImage-width);\\n  height: var(--jp-private-notebook-dragImage-height);\\n  color: var(--jp-ui-font-color1);\\n  background: var(--jp-layout-color1);\\n}\\n\\n.elyra-metadata-code-snippets\\n  .elyra-metadata-item\\n  .elyra-expandableContainer-details-visible {\\n  height: 100px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeSnippetService = exports.CODE_SNIPPET_SCHEMA = exports.CODE_SNIPPET_SCHEMASPACE = void 0;\nconst services_1 = require(\"@elyra/services\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nexports.CODE_SNIPPET_SCHEMASPACE = 'code-snippets';\nexports.CODE_SNIPPET_SCHEMA = 'code-snippet';\nclass CodeSnippetService {\n    static findAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return services_1.MetadataService.getMetadata(exports.CODE_SNIPPET_SCHEMASPACE);\n        });\n    }\n    // TODO: Test this function\n    static findByLanguage(language) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const allCodeSnippets = yield this.findAll();\n                const codeSnippetsByLanguage = [];\n                for (const codeSnippet of allCodeSnippets) {\n                    if (codeSnippet.metadata.language === language) {\n                        codeSnippetsByLanguage.push(codeSnippet);\n                    }\n                }\n                return codeSnippetsByLanguage;\n            }\n            catch (error) {\n                return Promise.reject(error);\n            }\n        });\n    }\n    /**\n     * Opens a dialog to confirm that the given code snippet\n     * should be deleted, then sends a delete request to the metadata server.\n     *\n     * @param codeSnippet: code snippet to be deleted\n     *\n     * @returns A boolean promise that is true if the dialog confirmed\n     * the deletion, and false if the deletion was cancelled.\n     */\n    static deleteCodeSnippet(codeSnippet) {\n        return apputils_1.showDialog({\n            title: `Delete snippet '${codeSnippet.display_name}'?`,\n            buttons: [apputils_1.Dialog.cancelButton(), apputils_1.Dialog.okButton()]\n        }).then((result) => {\n            // Do nothing if the cancel button is pressed\n            if (result.button.accept) {\n                return services_1.MetadataService.deleteMetadata(exports.CODE_SNIPPET_SCHEMASPACE, codeSnippet.name).then(() => true);\n            }\n            else {\n                return false;\n            }\n        });\n    }\n}\nexports.CodeSnippetService = CodeSnippetService;\n//# sourceMappingURL=CodeSnippetService.js.map","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeSnippetWidget = void 0;\nrequire(\"../style/index.css\");\nconst metadata_common_1 = require(\"@elyra/metadata-common\");\nconst ui_components_1 = require(\"@elyra/ui-components\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst cells_1 = require(\"@jupyterlab/cells\");\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst fileeditor_1 = require(\"@jupyterlab/fileeditor\");\nconst notebook_1 = require(\"@jupyterlab/notebook\");\nconst ui_components_2 = require(\"@jupyterlab/ui-components\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst coreutils_2 = require(\"@lumino/coreutils\");\nconst dragdrop_1 = require(\"@lumino/dragdrop\");\nconst react_1 = __importDefault(require(\"react\"));\nconst CodeSnippetService_1 = require(\"./CodeSnippetService\");\nconst METADATA_EDITOR_ID = 'elyra-metadata-editor';\nconst SNIPPET_DRAG_IMAGE_CLASS = 'elyra-codeSnippet-drag-image';\nconst CODE_SNIPPETS_METADATA_CLASS = 'elyra-metadata-code-snippets';\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\n/**\n * A React Component for code-snippets display list.\n */\nclass CodeSnippetDisplay extends metadata_common_1.MetadataDisplay {\n    constructor(props) {\n        super(props);\n        this.editors = {};\n        // Handle code snippet insertion into an editor\n        this.insertCodeSnippet = (snippet) => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            const widget = this.props.getCurrentWidget();\n            const codeSnippet = snippet.metadata.code.join('\\n');\n            const snippetLanguage = snippet.metadata.language;\n            if (widget === null) {\n                return;\n            }\n            if (this.isFileEditor(widget)) {\n                const fileEditor = widget.content.editor;\n                const markdownRegex = /^\\.(md|mkdn?|mdown|markdown)$/;\n                const editorLanguage = this.getEditorLanguage(widget);\n                if (coreutils_1.PathExt.extname(widget.context.path).match(markdownRegex) !== null &&\n                    snippetLanguage.toLowerCase() !== 'markdown') {\n                    (_a = fileEditor.replaceSelection) === null || _a === void 0 ? void 0 : _a.call(fileEditor, this.addMarkdownCodeBlock(snippetLanguage, codeSnippet));\n                }\n                else if (editorLanguage) {\n                    this.verifyLanguageAndInsert(snippet, editorLanguage, fileEditor);\n                }\n                else {\n                    (_b = fileEditor.replaceSelection) === null || _b === void 0 ? void 0 : _b.call(fileEditor, codeSnippet);\n                }\n            }\n            else if (widget instanceof notebook_1.NotebookPanel) {\n                const notebookWidget = widget;\n                const notebookCell = notebookWidget.content.activeCell;\n                const notebookCellIndex = notebookWidget.content\n                    .activeCellIndex;\n                if (notebookCell === null) {\n                    return;\n                }\n                const notebookCellEditor = notebookCell.editor;\n                if (notebookCell instanceof cells_1.CodeCell) {\n                    const kernelInfo = yield ((_d = (_c = notebookWidget.sessionContext.session) === null || _c === void 0 ? void 0 : _c.kernel) === null || _d === void 0 ? void 0 : _d.info);\n                    const kernelLanguage = (kernelInfo === null || kernelInfo === void 0 ? void 0 : kernelInfo.language_info.name) || '';\n                    this.verifyLanguageAndInsert(snippet, kernelLanguage, notebookCellEditor);\n                }\n                else if (notebookCell instanceof cells_1.MarkdownCell &&\n                    snippetLanguage.toLowerCase() !== 'markdown') {\n                    (_e = notebookCellEditor.replaceSelection) === null || _e === void 0 ? void 0 : _e.call(notebookCellEditor, this.addMarkdownCodeBlock(snippetLanguage, codeSnippet));\n                }\n                else {\n                    (_f = notebookCellEditor.replaceSelection) === null || _f === void 0 ? void 0 : _f.call(notebookCellEditor, codeSnippet);\n                }\n                const cell = (_g = notebookWidget.model) === null || _g === void 0 ? void 0 : _g.contentFactory.createCodeCell({});\n                if (cell === undefined) {\n                    return;\n                }\n                (_h = notebookWidget.model) === null || _h === void 0 ? void 0 : _h.cells.insert(notebookCellIndex + 1, cell);\n            }\n            else {\n                this.showErrDialog('Code snippet insert failed: Unsupported widget');\n            }\n        });\n        // Verify if a given widget is a FileEditor\n        this.isFileEditor = (widget) => {\n            return widget.content instanceof fileeditor_1.FileEditor;\n        };\n        // Return the language of the editor or empty string\n        this.getEditorLanguage = (widget) => {\n            const editorLanguage = widget.context.sessionContext.kernelPreference.language;\n            return editorLanguage === 'null' ? '' : editorLanguage;\n        };\n        // Return the given code wrapped in a markdown code block\n        this.addMarkdownCodeBlock = (language, code) => {\n            return '```' + language + '\\n' + code + '\\n```';\n        };\n        // Handle language compatibility between code snippet and editor\n        this.verifyLanguageAndInsert = (snippet, editorLanguage, editor) => __awaiter(this, void 0, void 0, function* () {\n            var _j, _k;\n            const codeSnippet = snippet.metadata.code.join('\\n');\n            const snippetLanguage = snippet.metadata.language;\n            if (editorLanguage &&\n                snippetLanguage.toLowerCase() !== editorLanguage.toLowerCase()) {\n                const result = yield this.showWarnDialog(editorLanguage, snippet.display_name);\n                if (result.button.accept) {\n                    (_j = editor.replaceSelection) === null || _j === void 0 ? void 0 : _j.call(editor, codeSnippet);\n                }\n            }\n            else {\n                // Language match or editorLanguage is unavailable\n                (_k = editor.replaceSelection) === null || _k === void 0 ? void 0 : _k.call(editor, codeSnippet);\n            }\n        });\n        // Display warning dialog when inserting a code snippet incompatible with editor's language\n        this.showWarnDialog = (editorLanguage, snippetName) => __awaiter(this, void 0, void 0, function* () {\n            return apputils_1.showDialog({\n                title: 'Warning',\n                body: `Code snippet \"${snippetName}\" is incompatible with ${editorLanguage}. Continue?`,\n                buttons: [apputils_1.Dialog.cancelButton(), apputils_1.Dialog.okButton()]\n            });\n        });\n        // Display error dialog when inserting a code snippet into unsupported widget (i.e. not an editor)\n        this.showErrDialog = (errMsg) => {\n            return apputils_1.showDialog({\n                title: 'Error',\n                body: errMsg,\n                buttons: [apputils_1.Dialog.okButton()]\n            });\n        };\n        this.actionButtons = (metadata) => {\n            return [\n                {\n                    title: 'Copy to clipboard',\n                    icon: ui_components_2.pasteIcon,\n                    feedback: 'Copied!',\n                    onClick: () => {\n                        apputils_1.Clipboard.copyToSystem(metadata.metadata.code.join('\\n'));\n                    }\n                },\n                {\n                    title: 'Insert',\n                    icon: ui_components_1.importIcon,\n                    onClick: () => {\n                        this.insertCodeSnippet(metadata);\n                    }\n                },\n                {\n                    title: 'Edit',\n                    icon: ui_components_2.editIcon,\n                    onClick: () => {\n                        this.props.openMetadataEditor({\n                            onSave: this.props.updateMetadata,\n                            schemaspace: CodeSnippetService_1.CODE_SNIPPET_SCHEMASPACE,\n                            schema: CodeSnippetService_1.CODE_SNIPPET_SCHEMA,\n                            name: metadata.name\n                        });\n                    }\n                },\n                {\n                    title: 'Duplicate',\n                    icon: ui_components_2.copyIcon,\n                    onClick: () => {\n                        metadata_common_1.MetadataCommonService.duplicateMetadataInstance(CodeSnippetService_1.CODE_SNIPPET_SCHEMASPACE, metadata, this.props.metadata)\n                            .then((response) => {\n                            this.props.updateMetadata();\n                        })\n                            .catch(error => ui_components_1.RequestErrors.serverError(error));\n                    }\n                },\n                {\n                    title: 'Delete',\n                    icon: ui_components_1.trashIcon,\n                    onClick: () => {\n                        CodeSnippetService_1.CodeSnippetService.deleteCodeSnippet(metadata)\n                            .then((deleted) => {\n                            if (deleted) {\n                                this.props.updateMetadata();\n                                delete this.editors[metadata.name];\n                                const editorWidget = algorithm_1.find(this.props.shell.widgets('main'), (value, index) => {\n                                    return (value.id ===\n                                        `${METADATA_EDITOR_ID}:${CodeSnippetService_1.CODE_SNIPPET_SCHEMASPACE}:${CodeSnippetService_1.CODE_SNIPPET_SCHEMA}:${metadata.name}`);\n                                });\n                                if (editorWidget) {\n                                    editorWidget.dispose();\n                                }\n                            }\n                        })\n                            .catch(error => ui_components_1.RequestErrors.serverError(error));\n                    }\n                }\n            ];\n        };\n        // Render display of a code snippet\n        this.renderMetadata = (metadata) => {\n            return (react_1.default.createElement(\"div\", { key: metadata.name, \"data-item-id\": metadata.display_name, className: metadata_common_1.METADATA_ITEM, style: this.state.metadata.includes(metadata) ? {} : { display: 'none' } },\n                react_1.default.createElement(ui_components_1.ExpandableComponent, { displayName: this.getDisplayName(metadata), tooltip: metadata.metadata.description, actionButtons: this.actionButtons(metadata), onExpand: () => {\n                        this.editors[metadata.name].refresh();\n                    }, onMouseDown: (event) => {\n                        this.handleDragSnippet(event, metadata);\n                    } },\n                    react_1.default.createElement(\"div\", { id: metadata.name }))));\n        };\n        this.createPreviewEditors = () => {\n            const editorFactory = this.props.editorServices.factoryService\n                .newInlineEditor;\n            const getMimeTypeByLanguage = this.props.editorServices.mimeTypeService\n                .getMimeTypeByLanguage;\n            this.props.metadata.map((codeSnippet) => {\n                if (codeSnippet.name in this.editors) {\n                    // Make sure code is up to date\n                    this.editors[codeSnippet.name].model.value.text = codeSnippet.metadata.code.join('\\n');\n                }\n                else {\n                    // Add new snippets\n                    const snippetElement = document.getElementById(codeSnippet.name);\n                    if (snippetElement === null) {\n                        return;\n                    }\n                    this.editors[codeSnippet.name] = editorFactory({\n                        config: { readOnly: true },\n                        host: snippetElement,\n                        model: new codeeditor_1.CodeEditor.Model({\n                            value: codeSnippet.metadata.code.join('\\n'),\n                            mimeType: getMimeTypeByLanguage({\n                                name: codeSnippet.metadata.language,\n                                codemirror_mode: codeSnippet.metadata.language\n                            })\n                        })\n                    });\n                }\n            });\n        };\n        this._drag = null;\n        this._dragData = null;\n        this.handleDragMove = this.handleDragMove.bind(this);\n        this._evtMouseUp = this._evtMouseUp.bind(this);\n    }\n    // Initial setup to handle dragging a code snippet\n    handleDragSnippet(event, metadata) {\n        const { button } = event;\n        // do nothing if left mouse button is clicked\n        if (button !== 0) {\n            return;\n        }\n        this._dragData = {\n            pressX: event.clientX,\n            pressY: event.clientY,\n            dragImage: null\n        };\n        const mouseUpListener = (event) => {\n            this._evtMouseUp(event, metadata, mouseMoveListener);\n        };\n        const mouseMoveListener = (event) => {\n            this.handleDragMove(event, metadata, mouseMoveListener, mouseUpListener);\n        };\n        const target = event.target;\n        target.addEventListener('mouseup', mouseUpListener, {\n            once: true,\n            capture: true\n        });\n        target.addEventListener('mousemove', mouseMoveListener, true);\n        // since a browser has its own drag'n'drop support for images and some other elements.\n        target.ondragstart = () => false;\n    }\n    _evtMouseUp(event, metadata, mouseMoveListener) {\n        event.preventDefault();\n        event.stopPropagation();\n        const target = event.target;\n        target.removeEventListener('mousemove', mouseMoveListener, true);\n    }\n    handleDragMove(event, metadata, mouseMoveListener, mouseUpListener) {\n        event.preventDefault();\n        event.stopPropagation();\n        const data = this._dragData;\n        if (data &&\n            this.shouldStartDrag(data.pressX, data.pressY, event.clientX, event.clientY)) {\n            // Create drag image\n            const element = document.createElement('div');\n            element.innerHTML = this.getDisplayName(metadata);\n            element.classList.add(SNIPPET_DRAG_IMAGE_CLASS);\n            data.dragImage = element;\n            // Remove mouse listeners and start the drag.\n            const target = event.target;\n            target.removeEventListener('mousemove', mouseMoveListener, true);\n            target.removeEventListener('mouseup', mouseUpListener, true);\n            void this.startDrag(data.dragImage, metadata, event.clientX, event.clientY);\n        }\n    }\n    /**\n     * Detect if a drag event should be started. This is down if the\n     * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n     *\n     * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n     * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n     * @param nextX - Current X Coordinate of the mouse pointer\n     * @param nextY - Current Y Coordinate of the mouse pointer\n     */\n    shouldStartDrag(prevX, prevY, nextX, nextY) {\n        const dx = Math.abs(nextX - prevX);\n        const dy = Math.abs(nextY - prevY);\n        return dx >= 0 || dy >= DRAG_THRESHOLD;\n    }\n    startDrag(dragImage, metadata, clientX, clientY) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contentFactory = new notebook_1.NotebookModel.ContentFactory({});\n            const language = metadata.metadata.language;\n            const model = language.toLowerCase() !== 'markdown'\n                ? contentFactory.createCodeCell({})\n                : contentFactory.createMarkdownCell({});\n            const content = metadata.metadata.code.join('\\n');\n            model.value.text = content;\n            this._drag = new dragdrop_1.Drag({\n                mimeData: new coreutils_2.MimeData(),\n                dragImage: dragImage,\n                supportedActions: 'copy-move',\n                proposedAction: 'copy',\n                source: this\n            });\n            const selected = [model.toJSON()];\n            this._drag.mimeData.setData(JUPYTER_CELL_MIME, selected);\n            this._drag.mimeData.setData('text/plain', content);\n            return this._drag.start(clientX, clientY).then(() => {\n                this._drag = null;\n                this._dragData = null;\n            });\n        });\n    }\n    getDisplayName(metadata) {\n        return `[${metadata.metadata.language}] ${metadata.display_name}`;\n    }\n    sortMetadata() {\n        this.props.metadata.sort((a, b) => this.getDisplayName(a).localeCompare(this.getDisplayName(b)));\n    }\n    matchesSearch(searchValue, metadata) {\n        searchValue = searchValue.toLowerCase();\n        // True if search string is in name, display_name, or language of snippet\n        // or if the search string is empty\n        return (metadata.name.toLowerCase().includes(searchValue) ||\n            metadata.display_name.toLowerCase().includes(searchValue) ||\n            metadata.metadata.language.toLowerCase().includes(searchValue));\n    }\n    componentDidMount() {\n        this.createPreviewEditors();\n    }\n    componentDidUpdate() {\n        this.createPreviewEditors();\n    }\n}\n/**\n * A widget for Code Snippets.\n */\nclass CodeSnippetWidget extends metadata_common_1.MetadataWidget {\n    constructor(props) {\n        super(props);\n        this.props = props;\n    }\n    // Request code snippets from server\n    fetchMetadata() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return CodeSnippetService_1.CodeSnippetService.findAll().catch(error => ui_components_1.RequestErrors.serverError(error));\n        });\n    }\n    renderDisplay(metadata) {\n        if (Array.isArray(metadata) && !metadata.length) {\n            // Empty metadata\n            return (react_1.default.createElement(\"div\", null,\n                react_1.default.createElement(\"br\", null),\n                react_1.default.createElement(\"h6\", { className: \"elyra-no-metadata-msg\" },\n                    \"Click the + button to add \",\n                    this.props.display_name.toLowerCase())));\n        }\n        return (react_1.default.createElement(CodeSnippetDisplay, { metadata: metadata, openMetadataEditor: this.openMetadataEditor, updateMetadata: this.updateMetadata, schemaspace: CodeSnippetService_1.CODE_SNIPPET_SCHEMASPACE, schema: CodeSnippetService_1.CODE_SNIPPET_SCHEMA, getCurrentWidget: this.props.getCurrentWidget, className: CODE_SNIPPETS_METADATA_CLASS, editorServices: this.props.editorServices, shell: this.props.app.shell, sortMetadata: true }));\n    }\n}\nexports.CodeSnippetWidget = CodeSnippetWidget;\n//# sourceMappingURL=CodeSnippetWidget.js.map","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.code_snippet_extension = void 0;\nrequire(\"../style/index.css\");\nconst ui_components_1 = require(\"@elyra/ui-components\");\nconst application_1 = require(\"@jupyterlab/application\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\nconst docregistry_1 = require(\"@jupyterlab/docregistry\");\nconst fileeditor_1 = require(\"@jupyterlab/fileeditor\");\nconst markdownviewer_1 = require(\"@jupyterlab/markdownviewer\");\nconst notebook_1 = require(\"@jupyterlab/notebook\");\nconst CodeSnippetService_1 = require(\"./CodeSnippetService\");\nconst CodeSnippetWidget_1 = require(\"./CodeSnippetWidget\");\nconst CODE_SNIPPET_EXTENSION_ID = 'elyra-code-snippet-extension';\nconst commandIDs = {\n    saveAsSnippet: 'codesnippet:save-as-snippet'\n};\n/**\n * Initialization data for the code-snippet extension.\n */\nexports.code_snippet_extension = {\n    id: CODE_SNIPPET_EXTENSION_ID,\n    autoStart: true,\n    requires: [apputils_1.ICommandPalette, application_1.ILayoutRestorer, codeeditor_1.IEditorServices],\n    activate: (app, palette, restorer, editorServices) => {\n        console.log('Elyra - code-snippet extension is activated!');\n        const getCurrentWidget = () => {\n            return app.shell.currentWidget;\n        };\n        const codeSnippetWidget = new CodeSnippetWidget_1.CodeSnippetWidget({\n            app,\n            display_name: 'Code Snippets',\n            schemaspace: CodeSnippetService_1.CODE_SNIPPET_SCHEMASPACE,\n            schema: CodeSnippetService_1.CODE_SNIPPET_SCHEMA,\n            icon: ui_components_1.codeSnippetIcon,\n            getCurrentWidget,\n            editorServices,\n            titleContext: 'code snippet'\n        });\n        const codeSnippetWidgetId = `elyra-metadata:${CodeSnippetService_1.CODE_SNIPPET_SCHEMASPACE}`;\n        codeSnippetWidget.id = codeSnippetWidgetId;\n        codeSnippetWidget.title.icon = ui_components_1.codeSnippetIcon;\n        codeSnippetWidget.title.caption = 'Code Snippets';\n        restorer.add(codeSnippetWidget, codeSnippetWidgetId);\n        // Rank has been chosen somewhat arbitrarily to give priority to the running\n        // sessions widget in the sidebar.\n        app.shell.add(codeSnippetWidget, 'left', { rank: 900 });\n        app.commands.addCommand(commandIDs.saveAsSnippet, {\n            label: 'Save As Code Snippet',\n            isEnabled: () => {\n                var _a, _b;\n                const currentWidget = app.shell.currentWidget;\n                const editor = getEditor(currentWidget);\n                let selection = '';\n                if (editor) {\n                    selection = getTextSelection(editor);\n                }\n                else if (isMarkdownDocument(currentWidget)) {\n                    selection = (_b = (_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '';\n                }\n                if (selection.length > 0) {\n                    return true;\n                }\n                if (isNotebookEditor(currentWidget)) {\n                    if (getSelectedCellContents().length > 0) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n            isVisible: () => true,\n            execute: () => {\n                var _a, _b;\n                const currentWidget = app.shell.currentWidget;\n                const editor = getEditor(currentWidget);\n                let selection = '';\n                if (editor) {\n                    selection = getTextSelection(editor);\n                }\n                else if (isMarkdownDocument(currentWidget)) {\n                    selection = (_b = (_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '';\n                }\n                if (selection.length > 0) {\n                    codeSnippetWidget.openMetadataEditor({\n                        schemaspace: CodeSnippetService_1.CODE_SNIPPET_SCHEMASPACE,\n                        schema: CodeSnippetService_1.CODE_SNIPPET_SCHEMA,\n                        code: selection.split('\\n'),\n                        onSave: codeSnippetWidget.updateMetadata\n                    });\n                }\n                else {\n                    const selectedCells = getSelectedCellContents();\n                    const code = selectedCells.join('\\n\\n').split('\\n');\n                    codeSnippetWidget.openMetadataEditor({\n                        schemaspace: CodeSnippetService_1.CODE_SNIPPET_SCHEMASPACE,\n                        schema: CodeSnippetService_1.CODE_SNIPPET_SCHEMA,\n                        code: code,\n                        onSave: codeSnippetWidget.updateMetadata\n                    });\n                }\n            }\n        });\n        app.contextMenu.addItem({\n            command: commandIDs.saveAsSnippet,\n            selector: '.jp-Cell'\n        });\n        app.contextMenu.addItem({\n            command: commandIDs.saveAsSnippet,\n            selector: '.jp-FileEditor'\n        });\n        app.contextMenu.addItem({\n            command: commandIDs.saveAsSnippet,\n            selector: '.jp-MarkdownViewer'\n        });\n        const getTextSelection = (editor, markdownPreview) => {\n            var _a, _b;\n            const selectionObj = editor.getSelection();\n            const start = editor.getOffsetAt(selectionObj.start);\n            const end = editor.getOffsetAt(selectionObj.end);\n            const selection = editor.model.value.text.substring(start, end);\n            if (!selection && editor.model.value.text) {\n                // Allow selections from a rendered notebook cell\n                return (_b = (_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '';\n            }\n            return selection;\n        };\n        const getSelectedCellContents = () => {\n            const currentWidget = app.shell.currentWidget;\n            const notebookWidget = currentWidget;\n            const notebook = notebookWidget.content;\n            const notebookCell = notebook.activeCell;\n            const selectedCells = [];\n            if (notebookCell) {\n                const allCells = notebook.widgets;\n                allCells.forEach((cell) => {\n                    if (notebook.isSelectedOrActive(cell)) {\n                        const contents = cell.model.toJSON().source.toString();\n                        if (contents.length > 0)\n                            selectedCells.push(contents);\n                    }\n                });\n            }\n            return selectedCells;\n        };\n        const isFileEditor = (currentWidget) => {\n            return (currentWidget instanceof docregistry_1.DocumentWidget &&\n                currentWidget.content instanceof fileeditor_1.FileEditor);\n        };\n        const isNotebookEditor = (currentWidget) => {\n            return currentWidget instanceof notebook_1.NotebookPanel;\n        };\n        const isMarkdownDocument = (currentWidget) => {\n            return currentWidget instanceof markdownviewer_1.MarkdownDocument;\n        };\n        const getEditor = (currentWidget) => {\n            if (isFileEditor(currentWidget)) {\n                const documentWidget = currentWidget;\n                return documentWidget.content.editor;\n            }\n            else if (isNotebookEditor(currentWidget)) {\n                const notebookWidget = currentWidget;\n                const notebookCell = notebookWidget.content.activeCell;\n                return notebookCell === null || notebookCell === void 0 ? void 0 : notebookCell.editor;\n            }\n        };\n    }\n};\nexports.default = exports.code_snippet_extension;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}