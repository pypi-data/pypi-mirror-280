{"version":3,"file":"services_lib_index_js.7bc7a35e228ea13edc88.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAC4H;AAC7B;AAC/F,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,4JAA4J,8fAA8f,2GAA2G,2IAA2I,0gBAA0gB;AAC15C;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;ACPwD;AAC/F,YAA6F;;AAE7F;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,sFAAO;;;;AAIxB,iEAAe,6FAAc,MAAM;;;;;;;;;;ACZtB;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAO,CAAC,uDAAoB;AAC5B,aAAa,mBAAO,CAAC,6CAAW;AAChC,aAAa,mBAAO,CAAC,+CAAY;AACjC,aAAa,mBAAO,CAAC,+CAAY;AACjC;;;;;;;;;;AC/Ba;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,mBAAmB,mBAAO,CAAC,+CAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,4BAA4B,EAAE,YAAY,GAAG,KAAK;AACjH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,4BAA4B,EAAE,YAAY,GAAG,KAAK;AACpH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB;AACvB;AACA;;;;;;;;;;ACzIa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,mBAAmB,mBAAO,CAAC,+CAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB;AACrB;;;;;;;;;;ACpDa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,oBAAoB,mBAAO,CAAC,oFAAuB;AACnD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,eAAe;AACxE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mCAAmC;AAC5F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kCAAkC;AAC3F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kBAAkB;AAC3E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC,qCAAqC,oBAAoB,aAAa,WAAW;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB;AACtB","sources":["webpack://@elyra/pipeline-editor-extension/../services/style/index.css","webpack://@elyra/pipeline-editor-extension/../services/style/index.css?471b","webpack://@elyra/pipeline-editor-extension/../services/lib/index.js","webpack://@elyra/pipeline-editor-extension/../services/lib/metadata.js","webpack://@elyra/pipeline-editor-extension/../services/lib/parsing.js","webpack://@elyra/pipeline-editor-extension/../services/lib/requests.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\n * Copyright 2018-2023 Elyra Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./../services/style/index.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;EAcE\",\"sourcesContent\":[\"/*\\n * Copyright 2018-2023 Elyra Authors\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"../style/index.css\");\n__exportStar(require(\"./parsing\"), exports);\n__exportStar(require(\"./metadata\"), exports);\n__exportStar(require(\"./requests\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetadataService = void 0;\nconst requests_1 = require(\"./requests\");\nconst ELYRA_METADATA_API_ENDPOINT = 'elyra/metadata/';\nconst ELYRA_SCHEMA_API_ENDPOINT = 'elyra/schema/';\nconst ELYRA_SCHEMASPACE_API_ENDPOINT = 'elyra/schemaspace';\n/**\n * A service class for accessing the elyra api.\n */\nclass MetadataService {\n    /**\n     * Service function for making GET calls to the elyra metadata API.\n     *\n     * @param schemaspace - the metadata schemaspace being accessed\n     *\n     * @returns a promise that resolves with the requested metadata or\n     * an error dialog result\n     */\n    static getMetadata(schemaspace) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return requests_1.RequestHandler.makeGetRequest(ELYRA_METADATA_API_ENDPOINT + schemaspace).then(metadataResponse => metadataResponse[schemaspace]);\n        });\n    }\n    /**\n     * Service function for making POST calls to the elyra metadata API.\n     *\n     * @param schemaspace - the metadata schemaspace being accessed\n     * @param requestBody - the body of the request\n     *\n     * @returns a promise that resolves with the newly created metadata or\n     * an error dialog result\n     */\n    static postMetadata(schemaspace, requestBody) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return requests_1.RequestHandler.makePostRequest(ELYRA_METADATA_API_ENDPOINT + schemaspace, requestBody);\n        });\n    }\n    /**\n     * Service function for making PUT calls to the elyra metadata API.\n     *\n     * @param schemaspace - the metadata schemaspace being accessed\n     * @param name - the metadata name being updated\n     * @param requestBody - the body of the request\n     *\n     * @returns a promise that resolves with the updated metadata or\n     * an error dialog result\n     */\n    static putMetadata(schemaspace, name, requestBody) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return requests_1.RequestHandler.makePutRequest(`${ELYRA_METADATA_API_ENDPOINT}${schemaspace}/${name}`, requestBody);\n        });\n    }\n    /**\n     * Service function for making DELETE calls to the elyra metadata API.\n     *\n     * @param schemaspace - the metadata schemaspace being accessed\n     * @param name - the metadata name being updated\n     *\n     * @returns void or an error dialog result\n     */\n    static deleteMetadata(schemaspace, name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return requests_1.RequestHandler.makeDeleteRequest(`${ELYRA_METADATA_API_ENDPOINT}${schemaspace}/${name}`);\n        });\n    }\n    /**\n     * Service function for making GET calls to the elyra schema API.\n     *\n     * @param schemaspace - the schema schemaspace being requested\n     *\n     * @returns a promise that resolves with the requested schemas or\n     * an error dialog result\n     */\n    static getSchema(schemaspace) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.schemaCache[schemaspace]) {\n                // Deep copy cached schema to mimic request call\n                return JSON.parse(JSON.stringify(this.schemaCache[schemaspace]));\n            }\n            return requests_1.RequestHandler.makeGetRequest(ELYRA_SCHEMA_API_ENDPOINT + schemaspace).then(schemaResponse => {\n                if (schemaResponse[schemaspace]) {\n                    this.schemaCache[schemaspace] = schemaResponse[schemaspace];\n                }\n                return schemaResponse[schemaspace];\n            });\n        });\n    }\n    /**\n     * Service function for making GET calls to the elyra schema API.\n     *\n     * @returns a promise that resolves with the requested schemas or\n     * an error dialog result\n     */\n    static getAllSchema() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const schemaspaces = yield requests_1.RequestHandler.makeGetRequest(ELYRA_SCHEMASPACE_API_ENDPOINT);\n                const schemas = [];\n                for (const schemaspace of schemaspaces['schemaspaces']) {\n                    const schema = yield this.getSchema(schemaspace);\n                    schemas.push(...schema);\n                }\n                return schemas;\n            }\n            catch (error) {\n                return Promise.reject(error);\n            }\n        });\n    }\n}\nexports.MetadataService = MetadataService;\nMetadataService.schemaCache = {};\n//# sourceMappingURL=metadata.js.map","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContentParser = void 0;\nconst requests_1 = require(\"./requests\");\nconst ELYRA_FILE_PARSER_API_ENDPOINT = 'elyra/contents/properties/';\n/**\n * A utilities class for parsing notebook files.\n */\nclass ContentParser {\n    /**\n     * Takes in a file_path and finds all env vars accessed in that file.\n     * @param file_path - relative path to file\n     * @returns A string array of the env vars accessed in the given file\n     */\n    static getEnvVars(file_path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield requests_1.RequestHandler.makeGetRequest(ELYRA_FILE_PARSER_API_ENDPOINT + file_path);\n                // Only return environment var names (not values)\n                return Object.keys(response.env_vars);\n            }\n            catch (error) {\n                return Promise.reject(error);\n            }\n        });\n    }\n}\nexports.ContentParser = ContentParser;\n//# sourceMappingURL=parsing.js.map","\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestHandler = void 0;\nconst coreutils_1 = require(\"@jupyterlab/coreutils\");\nconst services_1 = require(\"@jupyterlab/services\");\n/**\n * A service class for making requests to the jupyter lab server.\n */\nclass RequestHandler {\n    /**\n     * Make a GET request to the jupyter lab server.\n     *\n     * All errors returned by the server are handled by displaying a relevant\n     * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n     * to users while waiting for the server response. On success a promise that\n     * resolves to the server response is returned.\n     *\n     * @param requestPath - The url path for the request.\n     * This path is appended to the base path of the server for the request.\n     *\n     * @param longRequestDialog - A optional Dialog param.\n     * A warning Dialog to display while waiting for the request to return.\n     *\n     * @returns a promise that resolves with the server response on success or\n     * an error dialog result in cases of failure.\n     */\n    static makeGetRequest(requestPath, longRequestDialog) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeServerRequest(requestPath, { method: 'GET' }, longRequestDialog);\n        });\n    }\n    /**\n     * Make a POST request to the jupyter lab server.\n     *\n     * All errors returned by the server are handled by displaying a relevant\n     * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n     * to users while waiting for the server response. On success a promise that\n     * resolves to the server response is returned.\n     *\n     * @param requestPath - The url path for the request.\n     * This path is appended to the base path of the server for the request.\n     *\n     * @param requestBody - The body of the request.\n     * Will be included in the RequestInit object passed to `makeServerRequest`\n     *\n     * @param longRequestDialog - A optional Dialog param.\n     * A warning Dialog to display while waiting for the request to return.\n     *\n     * @returns a promise that resolves with the server response on success or\n     * an error dialog result in cases of failure.\n     */\n    static makePostRequest(requestPath, requestBody, longRequestDialog) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeServerRequest(requestPath, { method: 'POST', body: requestBody }, longRequestDialog);\n        });\n    }\n    /**\n     * Make a PUT request to the jupyter lab server.\n     *\n     * All errors returned by the server are handled by displaying a relevant\n     * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n     * to users while waiting for the server response. On success a promise that\n     * resolves to the server response is returned.\n     *\n     * @param requestPath - The url path for the request.\n     * This path is appended to the base path of the server for the request.\n     *\n     * @param requestBody - The body of the request.\n     * Will be included in the RequestInit object passed to `makeServerRequest`\n     *\n     * @param longRequestDialog - A optional Dialog param.\n     * A warning Dialog to display while waiting for the request to return.\n     *\n     * @returns a promise that resolves with the server response on success or\n     * an error dialog result in cases of failure.\n     */\n    static makePutRequest(requestPath, requestBody, longRequestDialog) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeServerRequest(requestPath, { method: 'PUT', body: requestBody }, longRequestDialog);\n        });\n    }\n    /**\n     * Make a DELETE request to the jupyter lab server.\n     *\n     * All errors returned by the server are handled by displaying a relevant\n     * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n     * to users while waiting for the server response. On success a promise that\n     * resolves to the server response is returned.\n     *\n     * @param requestPath - The url path for the request.\n     * This path is appended to the base path of the server for the request.\n     *\n     * @param longRequestDialog - A optional Dialog param.\n     * A warning Dialog to display while waiting for the request to return.\n     *\n     * @returns a promise that resolves with the server response on success or\n     * an error dialog result in cases of failure.\n     */\n    static makeDeleteRequest(requestPath, longRequestDialog) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeServerRequest(requestPath, { method: 'DELETE' }, longRequestDialog);\n        });\n    }\n    /**\n     * Make a request to the jupyter lab server.\n     *\n     * The method of request is set in the `method` value in `requestInit`.\n     * All errors returned by the server are handled by displaying a relevant\n     * error dialog. If provided a `longRequestDialog` then the dialog is displayed\n     * to users while waiting for the server response. On success a promise that\n     * resolves to the server response is returned.\n     *\n     * @param requestPath - The url path for the request.\n     * This path is appended to the base path of the server for the request.\n     *\n     * @param requestInit - The initialization options for the request.\n     * A RequestInit object to be passed directly to `ServerConnection.makeRequest`\n     * that must include a value for `method`.\n     * This is based on \"@typescript/lib/lib.dom.d/RequestInit\"\n     * @see {@link https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts#L1558}\n     * and {@link https://fetch.spec.whatwg.org/#requestinit}\n     *\n     * @param longRequestDialog - A optional Dialog param.\n     * A warning Dialog to display while waiting for the request to return.\n     *\n     * @returns a promise that resolves with the server response on success or\n     * an error dialog result in cases of failure.\n     */\n    static makeServerRequest(requestPath, options, longRequestDialog) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // use ServerConnection utility to make calls to Jupyter Based services\n            // which in this case are in the extension installed by this package\n            const settings = services_1.ServerConnection.makeSettings();\n            const requestUrl = coreutils_1.URLExt.join(settings.baseUrl, requestPath);\n            const { type = 'json' } = options, requestInit = __rest(options, [\"type\"]);\n            console.log(`Sending a ${requestInit.method} request to ${requestUrl}`);\n            if (longRequestDialog) {\n                longRequestDialog.launch();\n            }\n            const getServerResponse = new Promise((resolve, reject) => {\n                services_1.ServerConnection.makeRequest(requestUrl, requestInit, settings).then((response) => {\n                    if (longRequestDialog) {\n                        longRequestDialog.resolve();\n                    }\n                    response[type]().then(\n                    // handle cases where the server returns a valid response\n                    (result) => {\n                        if (response.status === 405) {\n                            resolve(null);\n                        }\n                        if (response.status < 200 || response.status >= 300) {\n                            return reject(result);\n                        }\n                        resolve(result);\n                    }, \n                    // handle 404 if the server is not found\n                    (reason) => {\n                        if (response.status === 404 || response.status === 409) {\n                            response['requestPath'] = requestPath;\n                            return reject(response);\n                        }\n                        else if (response.status === 204) {\n                            resolve({});\n                        }\n                        else {\n                            return reject(reason);\n                        }\n                    });\n                }, \n                // something unexpected went wrong with the request\n                (reason) => {\n                    console.error(reason);\n                    return reject(reason);\n                });\n            });\n            const serverResponse = yield getServerResponse;\n            return serverResponse;\n        });\n    }\n}\nexports.RequestHandler = RequestHandler;\n//# sourceMappingURL=requests.js.map"],"names":[],"sourceRoot":""}