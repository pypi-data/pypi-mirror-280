{"version":3,"file":"lib_index_js.87ca26fee057e696a49e.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B,mBAAO,CAAC,6GAAwB;AAC1D,mBAAmB,mBAAO,CAAC,wFAAiB;AAC5C,wBAAwB,mBAAO,CAAC,2DAAsB;AACtD,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,sBAAsB,mBAAO,CAAC,wFAAyB;AACvD,wBAAwB,mBAAO,CAAC,4FAA2B;AAC3D,oBAAoB,mBAAO,CAAC,4EAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA,gCAAgC,mBAAmB,GAAG,iBAAiB,GAAG,YAAY,GAAG,8BAA8B;AACvH;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kHAAkH,WAAW;AAC7H,sFAAsF;AACtF,yDAAyD,+BAA+B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA,8BAA8B,YAAY,EAAE,4CAA4C;AACxF,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,8DAA8D,iBAAiB;AAC/E,gCAAgC,mBAAmB,GAAG,iBAAiB;AACvE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wDAAwD,YAAY;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAe;AACf","sources":["webpack://@elyra/metadata-extension/./lib/index.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2018-2023 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst metadata_common_1 = require(\"@elyra/metadata-common\");\nconst services_1 = require(\"@elyra/services\");\nconst ui_components_1 = require(\"@elyra/ui-components\");\nconst application_1 = require(\"@jupyterlab/application\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\nconst translation_1 = require(\"@jupyterlab/translation\");\nconst ui_components_2 = require(\"@jupyterlab/ui-components\");\nconst algorithm_1 = require(\"@lumino/algorithm\");\nconst METADATA_EDITOR_ID = 'elyra-metadata-editor';\nconst METADATA_WIDGET_ID = 'elyra-metadata';\nconst commandIDs = {\n    openMetadata: 'elyra-metadata:open',\n    closeTabCommand: 'elyra-metadata:close'\n};\n/**\n * Initialization data for the metadata-extension extension.\n */\nconst extension = {\n    id: METADATA_WIDGET_ID,\n    autoStart: true,\n    requires: [\n        apputils_1.ICommandPalette,\n        codeeditor_1.IEditorServices,\n        application_1.ILabStatus,\n        ui_components_2.IFormComponentRegistry,\n        translation_1.ITranslator\n    ],\n    activate: (app, palette, editorServices, status, componentRegistry, translator) => __awaiter(void 0, void 0, void 0, function* () {\n        console.log('Elyra - metadata extension is activated!');\n        componentRegistry.addRenderer('code', ui_components_1.CodeBlock);\n        componentRegistry.addRenderer('tags', ui_components_1.TagsField);\n        componentRegistry.addRenderer('dropdown', ui_components_1.DropDown);\n        componentRegistry.addRenderer('password', ui_components_1.PasswordField);\n        const openMetadataEditor = (args) => {\n            let widgetLabel;\n            if (args.name) {\n                widgetLabel = args.name;\n            }\n            else {\n                widgetLabel = `New ${args.schema}`;\n            }\n            const widgetId = `${METADATA_EDITOR_ID}:${args.schemaspace}:${args.schema}:${args.name ? args.name : 'new'}`;\n            const openWidget = algorithm_1.find(app.shell.widgets('main'), (widget, index) => {\n                return widget.id === widgetId;\n            });\n            if (openWidget) {\n                app.shell.activateById(widgetId);\n                return;\n            }\n            const metadataEditorWidget = new metadata_common_1.MetadataEditorWidget(Object.assign(Object.assign({}, args), { schemaName: args.schema, editorServices,\n                status, translator: translator.load('jupyterlab'), componentRegistry }));\n            const main = new apputils_1.MainAreaWidget({ content: metadataEditorWidget });\n            main.title.label = widgetLabel;\n            main.id = widgetId;\n            main.title.closable = true;\n            main.title.icon = ui_components_2.textEditorIcon;\n            metadataEditorWidget.addClass(METADATA_EDITOR_ID);\n            app.shell.add(main, 'main');\n        };\n        app.commands.addCommand(`${METADATA_EDITOR_ID}:open`, {\n            label: (args) => {\n                return `New ${args.title} ${args.appendToTitle ? args.titleContext : ''}`;\n            },\n            execute: (args) => {\n                openMetadataEditor(args);\n            }\n        });\n        const openMetadataWidget = (args) => {\n            const labIcon = ui_components_2.LabIcon.resolve({ icon: args.icon });\n            const widgetId = `${METADATA_WIDGET_ID}:${args.schemaspace}`;\n            const metadataWidget = new metadata_common_1.MetadataWidget({\n                app,\n                display_name: args.display_name,\n                schemaspace: args.schemaspace,\n                icon: labIcon\n            });\n            metadataWidget.id = widgetId;\n            metadataWidget.title.icon = labIcon;\n            metadataWidget.title.caption = args.display_name;\n            if (algorithm_1.find(app.shell.widgets('left'), value => value.id === widgetId) ===\n                undefined) {\n                app.shell.add(metadataWidget, 'left', { rank: 1000 });\n            }\n            app.shell.activateById(widgetId);\n        };\n        const openMetadataCommand = commandIDs.openMetadata;\n        app.commands.addCommand(openMetadataCommand, {\n            label: (args) => args['label'],\n            execute: (args) => {\n                // Rank has been chosen somewhat arbitrarily to give priority\n                // to the running sessions widget in the sidebar.\n                openMetadataWidget(args);\n            }\n        });\n        // Add command to close metadata tab\n        const closeTabCommand = commandIDs.closeTabCommand;\n        app.commands.addCommand(closeTabCommand, {\n            label: 'Close Tab',\n            execute: args => {\n                const contextNode = app.contextMenuHitTest(node => !!node.dataset.id);\n                if (contextNode) {\n                    const id = contextNode.dataset['id'];\n                    const widget = algorithm_1.find(app.shell.widgets('left'), (widget, index) => {\n                        return widget.id === id;\n                    });\n                    if (widget) {\n                        widget.dispose();\n                    }\n                }\n            }\n        });\n        app.contextMenu.addItem({\n            selector: '[data-id^=\"elyra-metadata:\"]:not([data-id$=\"code-snippets\"]):not([data-id$=\"runtimes\"])',\n            command: closeTabCommand\n        });\n        try {\n            const schemas = yield services_1.MetadataService.getAllSchema();\n            for (const schema of schemas) {\n                let icon = 'ui-components:text-editor';\n                let title = schema.title;\n                if (schema.uihints) {\n                    if (schema.uihints.icon) {\n                        icon = schema.uihints.icon;\n                    }\n                    if (schema.uihints.title) {\n                        title = schema.uihints.title;\n                    }\n                }\n                palette.addItem({\n                    command: commandIDs.openMetadata,\n                    args: {\n                        label: `Manage ${title}`,\n                        display_name: schema.uihints.title,\n                        schemaspace: schema.schemaspace,\n                        icon: icon\n                    },\n                    category: 'Elyra'\n                });\n            }\n        }\n        catch (error) {\n            ui_components_1.RequestErrors.serverError(error);\n        }\n    })\n};\nexports.default = extension;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}