# Defines the build system used for the project. In this case, uses nanobind to link C++ extensions to Python packages
# and scikit-build-core to compile the C++ code and build python wheels.
[build-system]
requires = ["scikit-build-core >=0.9.5", "nanobind >=1.3.2"]
build-backend = "scikit_build_core.build"

# Project metdata section. Provides the genral ID information about the project.
[project]
name = "ataraxis-time"
version = "1.0.2"
description = "Provides a sub-microsecond-precise thread-safe timer and methods to work with date and time data."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
authors = [
    { name = "Ivan Kondratyev", email = "ik278@cornell.edu" },
]
maintainers = [
    { name = "Ivan Kondratyev", email = "ik278@cornell.edu" },
]

keywords = [
    "time",
    "sub-microsecond precision",
    "high precision",
    "timer",
    "elapsed",
    "delay",
    "time conversion",
    "non-blocking",
    "blocking",
    "date"
]

classifiers = [
    # Development status
    "Development Status :: 5 - Production/Stable",
    # Intended audience and project topic
    "Intended Audience :: Developers",
    "Topic :: Software Development",
    # License
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    # Supported Python Versions
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    # Core languiage (C++)
    "Programming Language :: C++",
    # Supported Operating Systems
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X"
]

# Project-wide dependencies
dependencies = [
    "numpy<2.0.0",  # The newest numpy version currently fails to compile for linux, so odler one is used.
    "click",
    "tqdm",
    "pyyaml",
]

[project.urls]
Homepage = "https://github.com/Sun-Lab-NBB/ataraxis-time"
Documentation = "https://ataraxis-time-api-docs.netlify.app/"

# Specifies the dependecies for various build configurations. Mostly, these configurations are used together with 'tox'
# tasks to install the required packages prior to running those tasks. Note, many of these requirements overlap with
# eachother in a non-compatible way and should only be used through tox automation!
[project.optional-dependencies]
lint = [
    "mypy",
    "ruff",
    "types-tqdm",
]
stubs = [
    "mypy==1.4.0"
]
test = [
    "scikit-build-core",
    "nanobind",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "coverage[toml]",
]
coverage = [
    "junitparser",
    "coverage[toml]",
]
docs = [
    "sphinx",
    "importlib_metadata",
    "breathe",
    "sphinx-rtd-theme",
    "sphinx-click"
]
build = [
    "scikit-build-core",
    "nanobind",
    "cibuildwheel",
    "build",
]
upload = [
    "twine",
    "grayskull",
]

# A shorhand specification that installs tox and all packages required for the tox tasks. This specification can be used
# by developers to quickly install all necessary compontents for tox-based project building automation.
dev = [
    "tox",
    "ataraxis-time[lint]",
    "ataraxis-time[test]",
    "ataraxis-time[coverage]",
    "ataraxis-time[docs]",
    "ataraxis-time[build]",
    "ataraxis-time[upload]",
]

# Defines the shorthand 'benchmark_timer' command to allow users to quickly benchmark the timer class on their systems.
[project.scripts]
benchmark_timer = "ataraxis_time:benchmark"

# Additional Scikit-Build configuration section. Used together with CMakeLists.txt to compile the C++ extensions and
# assemble the library.
[tool.scikit-build]

# Specifies files that should not be included in the source-code distribution, but are also not part of gitignore.
sdist.exclude = [".github", "recipe"]

# Protects the configuration against future changes in scikit-build-core
minimum-version = "0.9"

# Instructs the backend to use setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

# Builds stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"

# Specifies additional configuration for the cibuildwheel backend, which is used to build OS- and Platform-specific
# binary wheels for the project. Techncially, this step can be outsourced to GitHub actions, but, for now, it is only
# avaialble locally (via 'tox -e build' command).
[tool.cibuildwheel]

# Declares and enables compiling with free-threaded support (for future python versions).
free-threaded-support = true

# Specifies runtime verbosity, which is necessary to see build output from the actual compilation
build-verbosity = 1

# Builds ALL wheels supported by the host OS and Platform. For maximum coverage, this should be run as a GitHub actions
# to truly cover ALL supported architectures for ALL OSes. Alternatively, the tox 'build' task can be run on separate
# machines running the target OSes.
archs = ["all"]

# Runs pytest to ensure that each binary wheel was built correctly. Uses pytest-xdist to optimize testing speed
# by using '-n (default: logical)' number of parallel workers and 'loadgroup' balancing strategy. This combination of
# parameters results in the best speed-to-safety ratio. Make sure you know how to specify test groups, which is
# respected by 'loadgroup' and can be used to prevent parallel access to non-sharable hardware resources.
test-command = "pytest {project}/tests -n logical --dist loadgroup"
test-requires = ["pytest", "pytest-xdist"]

# Specifies the OSx deployment target, which is needed for full C++17 support (not available in all OSx versions).
[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET = "10.14"

# Ruff section. This section is used to configure Ruff runtime, which is used by the tox 'lint' command.
[tool.ruff]
line-length = 120  # Maximum column length is set to 120 for this project.
src = ["src"]  # The name of the source directory

# Excludes 'service' .py files, such as sphinx configuration file. Add any other .py service files you may have to this
# list.
extend-exclude = [
    "conf.py",
]

# Same as the 'basepython' version in the tox.ini 'lint' section, see comments for that section for more details.
target-version = "py310"
# Checks for all potential violations and uses the exclusions below to target-disable specific ones.
lint.select = ["ALL"]

# General ignore directives.
lint.ignore = [
    "COM812", # Conflicts with the formatter
    "ISC001", # Conflicts with the formatter
    "ANN101", # "missing-type-self"
    "PT001", # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
    "PT004", # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
    "PT005", # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
    "PT023", # https://github.com/astral-sh/ruff/issues/8796#issuecomment-1825907715
    "D107", # Project-specific, __init__ is documented inside the main class docstring where applicable
    "D205", # Bugs out for file descriptions
    "PLW0603", # While global statement usage is not ideal, it greatly streamlines certain development patterns
    "T201", # Print is frequently used throughout the project for information reporting
]

# Additional, file-specific 'ignore' directives.
[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401", # Imported but unused
    "F403", # Wildcard imports
]
"docs/**" = [
    "INP001", # Requires __init__.py, but docs folder is not a package.
]

[tool.ruff.lint.pyupgrade]
# Preserves types, even if a file imports `from __future__ import annotations`
# (https://github.com/astral-sh/ruff/issues/5434)
keep-runtime-typing = true

# Specifies docstring style
[tool.ruff.lint.pydocstyle]
convention = "google"

# MyPy configuration section. MyPy is used to enforce typing in python and verify that all varaibles are correctly
# typed. This is used by tox 'lint' command. Note, for mypy to work correctly, you may need to manually resolve any
# stubs issues (tox -e stubs to resolve locally or see mypy output hints to resolve pacakge-related errors).
[tool.mypy]
disallow_untyped_defs = true # Enforces function annotation
warn_unused_ignores = true  # Warns against using 'type: ignore' for packages that have type stubs available.
exclude = [
    "ataraxis-time-\\d+", # Ignores temporary folder created by setuptools when building the sdist
    "venv.*/", # Ignores virtual environments
    "build/",  # Ignores the sdist folder
    "dist/",   # Ignores the wheel folder
    "docs/",   # Ignores the sphinx files stored inside the docs folder
    "stubs/",  # Ignores stubs folder (stubgen output target)
    "recipe/",  # Ignores recipe folder (grayskull output target)
    "tests/",   # Ignores the tests folder, as tests frequently (and purposefully) violate typing to test exceptions.
    "automation.py"  # Ignores the automation file
]

# This is used by the '-test' tox command to aggreagte coverage data produced during pytest runtime.
[tool.coverage.paths]

# Maps coverage measured in site-packages to source files in src
source = ["src/", ".tox/*/lib/python*/site-packages/"]

# Same as above, specifies the output directory for the coverage .html report
[tool.coverage.html]
directory = "reports/coverage_html"
