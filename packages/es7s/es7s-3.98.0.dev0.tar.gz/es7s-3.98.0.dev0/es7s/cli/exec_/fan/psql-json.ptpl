[[POSTGRESQL JSON OPERATORS]]

╔═════╦══════════╦════════╦══════════════════════════════════════════════╦════════════════════════════════════════════╗
║ OP¹ ║ RO² TYPE ║ RESULT ║ DESCRIPTION                                  ║ EXAMPLE                                    ║
╚═════╩══════════╩════════╩══════════════════════════════════════════════╩════════════════════════════════════════════╝
┃ ->  │ int/text │ json+  │ Get element by index/key                     │ WHERE (data->'users'->0)::int              ┃
┃ ->> │ int/text │ text   │ Get element by index/key as text             │ SELECT data->>'model'                      ┃
┃ #>  │ text[]   │ json+  │ Get element by path                          │ WHERE (data#>'{model,id}')::int            ┃
┃ #>> │ text[]   │ text   │ Get element by path as text                  │ SELECT data#>>'{model,user_ids}'           ┃
┣━━━━━┿━━━━━━━━━━┿━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
┃ @>  │ json+    │ bool   │ Does LO³ contain RO entries at top level?    │'{"a":1, "b":2}'::jsonb @> '{"b":2}'::jsonb ┃
┃ <@  │ json+    │ bool   │ Are LO entries contained at top level in RO? │'{"b":2}'::jsonb <@ '{"a":1, "b":2}'::jsonb ┃
┠─────┼──────────┼────────┼──────────────────────────────────────────────┼────────────────────────────────────────────┨
┃ ?   │ text     │ bool   │ Does RO exist as top-level key within LO?    │'{"a":1, "b":2}'::jsonb ? 'b'               ┃
┃ ?|  │ text[]   │ bool   │ Do ANY of strings exist as top-level keys?   │'{"a":1, "b":2}'::jsonb ?| '{b,c}'          ┃
┃ ?&  │ text[]   │ bool   │ Do ALL of strings exist as top-level keys?   │'["a", "b"]'::jsonb ?& '{a,b}'              ┃
┠─────┼──────────┼────────┼──────────────────────────────────────────────┼────────────────────────────────────────────┨
┃ ||  │ json+    │ json+  │ Concatenate two json+ values into new json+  │'["a", "b"]'::jsonb || '["c", "d"]'::jsonb  ┃
┠─────┼──────────┼────────┼──────────────────────────────────────────────┼────────────────────────────────────────────┨
┃ -   │ int      │ json+  │ Delete⁴ element with specified index from LO │'["a", "b"]'::jsonb - 1                     ┃
┃ -   │ text     │ json+  │ Delete⁵ K/V pair or string element from LO   │'{"a": "b"}'::jsonb - 'a'                   ┃
┃ #-  │ text[]   │ json+  │ Delete element with specified path from LO   │'["a", {"b":1}]'::jsonb #- '{1,b}'          ┃
┗━━━━━┷━━━━━━━━━━┷━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
                                                         ┌────────────────────┐┌──────────────────────────────────────┐
  ¹ operator         ⁴ throws an error if top level      │ For JSON arrays,   ││ Left operand is always json or jsonb │
  ² right operand      container is not an array         │ negative integers  │├──────────────────────────────────────┤
  ³ left operand     ⁵ pairs are matched based on key    │ count from the end ││  "json+" shall be read as "LO type"  │
                                                         └────────────────────┘└──────────────────────────────────────┘

(?<=[\s>])(\d+)[94m\1[39m
(?m)^\[\[(.+)\]\]$[38;5;231;1m\1[39;22m
\b(json)(\+)[34m\1[36mb[39m
\b(int|text|jsonb?|array|bool)\b[34m\1[39m
\b(data)\b[35m\1[39m
\b(ANY|ALL)\b[1m\1[22m
\b(WHERE|SELECT)\b|(::)[31m\1\2[22m
(->+|#>+|<@|@>)[33m\1[39m
(?<=\s)(\?[|&]?|\|\||#?-)(?=\s)[33m\1[39m
('.+?')[32m\1[39m
([()])[1;93m\1[22;39m
(?<!['])([][])(?!')[94m\1[39m
