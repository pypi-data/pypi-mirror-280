[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"

[project]
name = "sphinx-deployment"
authors = [{ name = "msclock", email = "msclock@126.com" }]
description = "A versioned documentation deployment tool for sphinx."
dynamic = ["version"]
license = { text = "Apache 2.0" }
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Sphinx :: Extension",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dependencies = [
    "importlib-metadata; python_version<'3.8'",
    "importlib-resources >=1.3; python_version<'3.9'",
    "typing-extensions >=3.10.0; python_version<'3.9'",
    "click",
    "loguru",
    "sphinx",
    "gitpython",
    "jinja2",
]

[project.optional-dependencies]
test = ["pytest >=6", "pytest-cov >=3"]
docs = [
    "sphinx",
    "furo",
    "myst_parser>=0.13",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
    "sphinx-inline-tabs",
]
dev = ["sphinx-deployment[test,docs]", "build", "wheel"]

[project.urls]
Homepage = "https://github.com/msclock/sphinx-deployment"
"Bug Tracker" = "https://github.com/msclock/sphinx-deployment/issues"
Discussions = "https://github.com/msclock/sphinx-deployment/discussions"
Changelog = "https://github.com/msclock/sphinx-deployment/releases"

[project.scripts]
sphinx_deployment = "sphinx_deployment.cli:commands"

[tool.setuptools_scm]
write_to = "src/sphinx_deployment/_version.py"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests"]

[tool.coverage]
run.source = ["sphinx_deployment"]
port.exclude_lines = ['pragma: no cover', '\.\.\.', 'if typing.TYPE_CHECKING:']

[tool.mypy]
files = ["src", "tests"]
python_version = "3.7"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "sphinx_deployment.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "I",   # isort
    "ARG", # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    "PD",  # pandas-vet
]
ignore = [
    "PLR",   # Design related pylint codes
    "UP006", # Use `list` instead of `typing.List` for type annotation
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["sphinx_deployment._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.pylint]
py-version = "3.7"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
    "design",
    "fixme",
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "wrong-import-position",
    "unnecessary-ellipsis",       # Conflicts with Protocols
    "broad-except",
    "unused-argument",            # Handled by Ruff
    "redefined-builtin",          # ExceptionGroup is a builtin
]
