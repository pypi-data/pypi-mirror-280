from .._utils.type_utils import CT as CT
from ..iterable.seq import Seq as Seq
from typing import Type, Callable, Iterable, TypeVar, overload

T = TypeVar('T')
R = TypeVar('R')

def kothon_filter(predicate: Callable[[T], bool]) -> Callable[[Iterable[T]], Seq[T]]: ...
def filter_not_none(sequence: Iterable[T | None]) -> Seq[T]: ...
@overload
def filter_is_instance(cls: Type[R], sequence: Iterable[T]) -> Seq[R]: ...
@overload
def filter_is_instance(cls: Type[R]) -> Callable[[Iterable[T]], Seq[R]]: ...
def kothon_map(fn: Callable[[T], R]) -> Callable[[Iterable[T]], Seq[R]]: ...
@overload
def map_not_none(fn: Callable[[T], R | None], sequence: Iterable[T]) -> Seq[R]: ...
@overload
def map_not_none(fn: Callable[[T], R | None]) -> Callable[[Iterable[T]], Seq[R]]: ...
@overload
def flat_map(fn: Callable[[T], Iterable[R]], sequence: Iterable[T]) -> Seq[R]: ...
@overload
def flat_map(fn: Callable[[T], Iterable[R]]) -> Callable[[Iterable[T]], Seq[R]]: ...
def flatten(sequence: Iterable[Iterable[R]]) -> Seq[R]: ...
@overload
def drop(n: int, sequence: Iterable[T]) -> Seq[T]: ...
@overload
def drop(n: int) -> Callable[[Iterable[T]], Seq[T]]: ...
@overload
def drop_while(predicate: Callable[[T], bool], sequence: Iterable[T]) -> Seq[T]: ...
@overload
def drop_while(predicate: Callable[[T], bool]) -> Callable[[Iterable[T]], Seq[T]]: ...
@overload
def take(n: int, sequence: Iterable[T]) -> Seq[T]: ...
@overload
def take(n: int) -> Callable[[Iterable[T]], Seq[T]]: ...
@overload
def take_while(predicate: Callable[[T], bool], sequence: Iterable[T]) -> Seq[T]: ...
@overload
def take_while(predicate: Callable[[T], bool]) -> Callable[[Iterable[T]], Seq[T]]: ...
@overload
def sorted_by(key_func: Callable[[T], CT], sequence: Iterable[T]) -> Seq[T]: ...
@overload
def sorted_by(key_func: Callable[[T], CT]) -> Callable[[Iterable[T]], Seq[T]]: ...
def sorted_desc(sequence: Iterable[CT]) -> Seq[CT]: ...
@overload
def sorted_by_desc(key_func: Callable[[T], CT], sequence: Iterable[T]) -> Seq[T]: ...
@overload
def sorted_by_desc(key_func: Callable[[T], CT]) -> Callable[[Iterable[T]], Seq[T]]: ...
@overload
def chunked(size: int, sequence: Iterable[T]) -> Seq[list[T]]: ...
@overload
def chunked(size: int) -> Callable[[Iterable[T]], Seq[list[T]]]: ...
def distinct(sequence: Iterable[T]) -> Seq[T]: ...
@overload
def distinct_by(key_selector: Callable[[T], R], sequence: Iterable[T]) -> Seq[T]: ...
@overload
def distinct_by(key_selector: Callable[[T], R]) -> Callable[[Iterable[T]], Seq[T]]: ...
@overload
def partition(predicate: Callable[[T], bool], sequence: Iterable[T]) -> tuple[list[T], list[T]]: ...
@overload
def partition(predicate: Callable[[T], bool]) -> Callable[[Iterable[T]], tuple[list[T], list[T]]]: ...
