# coding: utf-8

"""
    FDS API

    API for Flight Dynamics System

    The version of the OpenAPI document: 1.1.0
    Contact: contact@exotrail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_python_client.models.orbit_determination_result_dto import OrbitDeterminationResultDto

class TestOrbitDeterminationResultDto(unittest.TestCase):
    """OrbitDeterminationResultDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbitDeterminationResultDto:
        """Test OrbitDeterminationResultDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrbitDeterminationResultDto`
        """
        model = OrbitDeterminationResultDto()
        if include_optional:
            return OrbitDeterminationResultDto(
                estimated_keplerian_covariance = spacetower_python_client.models.covariance_matrix_dto.CovarianceMatrixDto(),
                estimated_states = [
                    spacetower_python_client.models.orbital_state_dto.OrbitalStateDto(
                        covariance_matrix_id = '', 
                        creation_date = '', 
                        fitted_tle = spacetower_python_client.models.tle.TLE(
                            line1 = '', 
                            line2 = '', ), 
                        id = '', 
                        mean_orbit_id = '', 
                        osculating_orbit_id = '', 
                        propagation_context_id = '', 
                        source = 'ORBIT_DETERMINATION', 
                        spacecraft_id = '', )
                    ],
                firing_analysis_report = spacetower_python_client.models.firing_analysis_report_dto.FiringAnalysisReportDto(
                    failed_analyses_dates = [
                        datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                        ], 
                    number_of_failed_analyses = 56, 
                    number_of_pending_analyses = 56, 
                    number_of_processed_analyses = 56, 
                    pending_analyses_dates = [
                        datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                        ], 
                    processed_analyses = [
                        spacetower_python_client.models.firing_analysis_dto.FiringAnalysisDto(
                            argument_of_perigee_delta = 1.337, 
                            date = '', 
                            eccentricity_delta = 1.337, 
                            estimated_acceleration = 1.337, 
                            estimated_thrust = 1.337, 
                            estimated_thrust_tnw_direction = [
                                1.337
                                ], 
                            id = '', 
                            inclination_delta = 1.337, 
                            raan_delta = 1.337, 
                            semi_major_axis_delta = 1.337, 
                            smoothed_keplerian_elements_after_firing = spacetower_python_client.models.smoothed_keplerian_elements_dto.SmoothedKeplerianElementsDto(
                                argument_of_perigee = 1.337, 
                                argument_of_perigee_standard_deviation = 1.337, 
                                eccentricity = 1.337, 
                                eccentricity_standard_deviation = 1.337, 
                                id = '', 
                                inclination = 1.337, 
                                inclination_standard_deviation = 1.337, 
                                raan = 1.337, 
                                raan_standard_deviation = 1.337, 
                                semi_major_axis = 1.337, 
                                semi_major_axis_standard_deviation = 1.337, ), 
                            smoothed_keplerian_elements_before_firing = spacetower_python_client.models.smoothed_keplerian_elements_dto.SmoothedKeplerianElementsDto(
                                argument_of_perigee = 1.337, 
                                argument_of_perigee_standard_deviation = 1.337, 
                                eccentricity = 1.337, 
                                eccentricity_standard_deviation = 1.337, 
                                id = '', 
                                inclination = 1.337, 
                                inclination_standard_deviation = 1.337, 
                                raan = 1.337, 
                                raan_standard_deviation = 1.337, 
                                semi_major_axis = 1.337, 
                                semi_major_axis_standard_deviation = 1.337, ), 
                            status = 'PROCESSED', )
                        ], ),
                id = '',
                in_depth_results = spacetower_python_client.models.orbit_determination_in_depth_results_dto.OrbitDeterminationInDepthResultsDto(
                    covariance_matrices = [
                        spacetower_python_client.models.covariance_matrix_dto.CovarianceMatrixDto()
                        ], 
                    estimated_drag_coefficients = [
                        spacetower_python_client.models.estimated_parameter_dto.EstimatedParameterDto(
                            date = '', 
                            id = '', 
                            value = 1.337, )
                        ], 
                    estimated_reflectivity_coefficients = [
                        spacetower_python_client.models.estimated_parameter_dto.EstimatedParameterDto(
                            date = '', 
                            id = '', 
                            value = 1.337, )
                        ], 
                    estimated_thrust_data = [
                        spacetower_python_client.models.estimated_thrust_dto.EstimatedThrustDto(
                            date = '', 
                            id = '', 
                            magnitude = 1.337, 
                            scale_factors = [
                                1.337
                                ], 
                            tnw_direction = [
                                1.337
                                ], )
                        ], 
                    mean_orbits = [
                        spacetower_python_client.models.orbit_dto.OrbitDto()
                        ], 
                    osculating_orbits = [
                        spacetower_python_client.models.orbit_dto.OrbitDto()
                        ], ),
                log = spacetower_python_client.models.orbit_determination_log_dto.OrbitDeterminationLogDto(
                    computation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    computation_status = 'COMPUTATION_FAILURE', 
                    error_messages = [
                        ''
                        ], 
                    id = '', ),
                report = spacetower_python_client.models.orbit_determination_report_dto.OrbitDeterminationReportDto(
                    number_of_rejected_measurements = 56, 
                    number_of_used_measurements = 56, 
                    residuals_statistics = [
                        spacetower_python_client.models.orbit_determination_residual_statistics_dto.OrbitDeterminationResidualStatisticsDto(
                            field = 'GPS_NMEA', 
                            id = '', 
                            mean = 1.337, 
                            median = 1.337, 
                            residuals = [
                                spacetower_python_client.models.residual_dto.ResidualDto(
                                    date = '', 
                                    id = '', 
                                    value = 1.337, )
                                ], 
                            standard_deviation = 1.337, )
                        ], ),
                request = None,
                status = 'SUCCESS'
            )
        else:
            return OrbitDeterminationResultDto(
        )
        """

    def testOrbitDeterminationResultDto(self):
        """Test OrbitDeterminationResultDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
