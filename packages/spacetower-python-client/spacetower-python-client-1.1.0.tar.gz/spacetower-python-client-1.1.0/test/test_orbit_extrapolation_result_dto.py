# coding: utf-8

"""
    FDS API

    API for Flight Dynamics System

    The version of the OpenAPI document: 1.1.0
    Contact: contact@exotrail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_python_client.models.orbit_extrapolation_result_dto import OrbitExtrapolationResultDto

class TestOrbitExtrapolationResultDto(unittest.TestCase):
    """OrbitExtrapolationResultDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbitExtrapolationResultDto:
        """Test OrbitExtrapolationResultDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrbitExtrapolationResultDto`
        """
        model = OrbitExtrapolationResultDto()
        if include_optional:
            return OrbitExtrapolationResultDto(
                computed_events = [
                    spacetower_python_client.models.event_log_dto.EventLogDto()
                    ],
                computed_measurements = [
                    spacetower_python_client.models.telemetry_dto.TelemetryDto()
                    ],
                ephemerides = [
                    spacetower_python_client.models.ephemeris_dto.EphemerisDto(
                        ephemeris_type = 'CARTESIAN', 
                        id = '', 
                        lines = [
                            spacetower_python_client.models.ephemeris_line_dto.EphemerisLineDto()
                            ], )
                    ],
                id = '',
                log = spacetower_python_client.models.orbit_extrapolation_log_dto.OrbitExtrapolationLogDto(
                    computation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    computation_status = 'COMPUTATION_FAILURE', 
                    error_messages = [
                        ''
                        ], 
                    id = '', ),
                orbit_data_message_output = '',
                orbital_states = [
                    spacetower_python_client.models.orbital_state_dto.OrbitalStateDto(
                        covariance_matrix_id = '', 
                        creation_date = '', 
                        fitted_tle = spacetower_python_client.models.tle.TLE(
                            line1 = '', 
                            line2 = '', ), 
                        id = '', 
                        mean_orbit_id = '', 
                        osculating_orbit_id = '', 
                        propagation_context_id = '', 
                        source = 'ORBIT_DETERMINATION', 
                        spacecraft_id = '', )
                    ],
                request = spacetower_python_client.models.orbit_extrapolation_output_dto.OrbitExtrapolationOutputDto(
                    ephemeris_request = spacetower_python_client.models.ephemeris_request_dto.EphemerisRequestDto(
                        ephemeris_types = [
                            'CARTESIAN'
                            ], 
                        id = '', 
                        step = 0, ), 
                    events_requests = [
                        spacetower_python_client.models.events_request_dto.EventsRequestDto()
                        ], 
                    extrapolate_covariance = True, 
                    extrapolation_duration = 1.337, 
                    id = '', 
                    initial_orbital_state = spacetower_python_client.models.orbital_state_dto.OrbitalStateDto(
                        covariance_matrix_id = '', 
                        creation_date = '', 
                        fitted_tle = spacetower_python_client.models.tle.TLE(
                            line1 = '', 
                            line2 = '', ), 
                        id = '', 
                        mean_orbit_id = '', 
                        osculating_orbit_id = '', 
                        propagation_context_id = '', 
                        source = 'ORBIT_DETERMINATION', 
                        spacecraft_id = '', ), 
                    measurements_request = spacetower_python_client.models.measurements_request.measurementsRequest(), 
                    orbit_data_message_request = spacetower_python_client.models.orbit_data_message_request.orbitDataMessageRequest(), 
                    required_output_orbital_states = 'ALL', 
                    roadmap = spacetower_python_client.models.roadmap.roadmap(), )
            )
        else:
            return OrbitExtrapolationResultDto(
        )
        """

    def testOrbitExtrapolationResultDto(self):
        """Test OrbitExtrapolationResultDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
