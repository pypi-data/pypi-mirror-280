[build-system]
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"

[project]
name = "pyauthorizer"
authors = [{ name = "msclock", email = "msclock@126.com" }]
description = "A simple authorizer for python project."
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Education",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
keywords = ["license", "license-generator"]
license = { text = "Apache 2.0" }
dependencies = [
    "loguru",
    "click",
    "cryptography>=41.0.0",
    "entrypoints",
    "types-entrypoints",
]

[project.optional-dependencies]
test = ["pytest >=6", "pytest-cov >=3"]
docs = [
    "sphinx>=7.0",
    "furo>=2023.08.17",
    "myst_parser>=0.13",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
    "sphinx-inline-tabs",
]
dev = ["pyauthorizer[test,docs]", "build", "wheel"]

[project.urls]
Homepage = "https://github.com/msclock/pyauthorizer"
Tracker = "https://github.com/msclock/pyauthorizer/issues"
Documentation = "https://github.com/msclock/pyauthorizer.git"
Source = "https://github.com/msclock/pyauthorizer.git"
Changelog = "https://github.com/msclock/pyauthorizer/releases"

[project.scripts]
pyauthorizer = "pyauthorizer.cli:commands"

[tool.setuptools]
include-package-data = true

[tool.setuptools_scm]
write_to = "src/pyauthorizer/_version.py"

[tool.check-sdist]
sdist-only = ["src/pyauthorizer/_version.py"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests"]

[tool.coverage]
run.source = ["pyauthorizer"]
port.exclude_lines = ['pragma: no cover', '\.\.\.', 'if typing.TYPE_CHECKING:']

[tool.mypy]
files = ["src", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "pyauthorizer.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
    "B",      # flake8-bugbear
    "I",      # isort
    "ARG",    # flake8-unused-arguments
    "C4",     # flake8-comprehensions
    "EM",     # flake8-errmsg
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "RET",    # flake8-return
    "RUF",    # Ruff-specific
    "SIM",    # flake8-simplify
    "T20",    # flake8-print
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "EXE",    # flake8-executable
    "NPY",    # NumPy specific rules
    "PD",     # pandas-vet
    "PTH123", # `open()` should be replaced by `Path.open()`
]
ignore = [
    "PLR", # Design related pylint codes
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["pyauthorizer._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
jobs = "0"
good-names = ["f"]
messages_control.disable = [
    "design",
    "fixme",
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "wrong-import-position",
    "unnecessary-ellipsis",  # Conflicts with Protocols
    "broad-except",
    "unused-argument",  # Handled by Ruff
    "redefined-builtin",  # ExceptionGroup is a builtin
]
