[tool.poetry]
name = "findanywhere"
version = "1.2.0"
description = "Tool for searching data in possible malformed input data as preprocessing step for further analysis."
authors = ["voidpointercast <voidpointercast@justmail.de>"]
classifiers = [
    "Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows :: Windows 11", "Topic :: Scientific/Engineering :: Information Analysis",
    "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.10"
]
license = "BSD License (BSD)"
readme = "README.md"
documentation = "https://whereisit.readthedocs.io/en/latest/"
repository = "https://gitlab.com/patrick.daniel.gress/findanywhere"
homepage = "https://gitlab.com/patrick.daniel.gress/findanywhere"
keywords = ["search", "fuzzy_search", "preprocessing"]


[tool.poetry.scripts]
whereisit = "findanywhere.ui.console:main"
whereisit_schema = "findanywhere.schema:main"
findanywhere = "findanywhere.ui.console:main"
findanywhere_schema = "findanywhere.schema:main"


[tool.poetry.dependencies]
python = "^3.10"
toolz = "^0.12.1"
jellyfish = "^1.0.3"
dacite = "^1.8.1"
pyyaml = "^6.0.1"


[tool.mypy]
ignore_missing_imports = true

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
types-pyyaml = "^6.0.12.20240311"
sphinx = "^7.3.7"
sphinx-rtd-theme = "^2.0.0"
tabulate = "^0.9.0"
faker = "^25.8.0"
pytest-faker = "^2.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

