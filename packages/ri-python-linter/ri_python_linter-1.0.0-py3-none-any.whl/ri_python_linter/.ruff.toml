# Which tools to include
select = [
    "PL",  # Pylint
    "F",  # Pyflakes
    "B",  # flake8-bugbear
    "E",  # pycodestyle Error
    "N",  # pep8-naming
    "W",  # Warning
    "D",  # pydocstyle
    "G",  # flake8-logging-format
    "UP",  # pyupgrade
    "PIE",  # flake8-pie
    "SLF",  # flake8-self
    "PYI",  # flake8-pyi
    "PGH",  # pygrep-hooks
    "ICN",  # flake8-import-conventions
    "ARG",  # flake8-unused-arguments
    # flake8-bandit (S) rule suite
    "S102",  # exec-builtin
    # tryceratops (TRY) rule suite
    "TRY302",  # useless-try-except
]

# Specific rules to ignore
ignore = [
    # Forbids use of `global` to update a variable. This isn't too useful, since on the rare occasions when `global` is used, it is always done so deliberately.
    "PLW0603",  # global-statement
    # This rule requires that errors be raised with `raise .. from err` inside `except` clauses, which does not seem to provide much value
    "B904",  # raise-without-from-inside-except
    # This rule forbids using loop variables in lambda functions. There seems to be no purporse to this rule.
    "B023",  # function-uses-loop-variable
    # TODO(GAI-429): address violations and unskip.
    "PGH003",  # blanket-type-ignore
    # Forbids specifying `mode` arg as "r" when using the builtin `open` function since it is the default value. We should prefer to be explicit, however.
    "UP015",  # redundant-open-modes
    "E501",  # line-too-long
    # No blank lines allowed after function docstring. This was ignored in our original linter, and most formatting nits should be handled by black.
    "D202",  # no-blank-line-after-function
    # (PINT-4270) Forbids f-string usage within logging statements. Workarounds are too restrictive without justifying upside.
    "G004",  # logging-f-string
]

# Which version of Python should the linter assume (some rules are version-specific)
target-version = "py38"

# Our code base has hundreds of violations of the default value of 5. Setting to the max existing value for now so we don't make it even worse in the meantime, and maybe we can have a massive tech debt project to clean this up at some point in the future.
pylint = {max-args = 15}

pep8-naming = {ignore-names = ["X", "Y", "X_*", "adv_X", "Validate*", "F"]}

flake8-unused-arguments = {ignore-variadic-names = true}

pydocstyle = {convention = "google"}

# Files/patterns to exclude in addition to the default set.
extend-exclude = [
    "setuptools_tests/_*",  # Autogenerated files
]

# Rules that should be ignored for specific files
[per-file-ignores]
# Less strict rules for imports in __init__.py files
"__init__.py" = [
    "F401",  # unused-import
    "F403",  # undefined-local-with-import-star
    "D104",  # undocumented-public-package
]
"tests/*" = [
    # Using magic values for unit test assert statements is very reasonable
    "PLR2004",  # magic-value-comparison
    # We exclude this tool from tests in our original linter.
    "D",  # pydocstyle
    # It is quite common to test private methods in unit tests
    "SLF001",  # private-member-access
    # Unused arguments are often necessary when mocking functions and when using pytest fixtures
    "ARG",  # flake8-unused-arguments
]
"*_tests/*" = [  # e.g., `integration_tests/*` or `local_tests/*`
    # Using magic values for unit test assert statements is very reasonable
    "PLR2004",  # magic-value-comparison
    # It is quite common to test private methods in unit tests
    "SLF001",  # private-member-access
]
"tests_*/*" = [  # e.g., `tests_unit/*`
    # It is quite common to test private methods in unit tests
    "SLF001",  # private-member-access
]
